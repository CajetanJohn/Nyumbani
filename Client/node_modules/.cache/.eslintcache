[{"/data/data/com.termux/files/home/Nyumbani/Client/src/index.js":"1","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Modal/Modal.js":"2","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Header/Header.js":"3","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Map/Map.js":"4","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/Feed.js":"5","/data/data/com.termux/files/home/Nyumbani/Client/src/Assets/Icons/Icons.js":"6","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Header/Menu/Menu.js":"7","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedMap/FeedMap.js":"8","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedInfo/FeedInfo.js":"9","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedPhotos/FeedPhotos.js":"10","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedReviews/FeedReviews.js":"11","/data/data/com.termux/files/home/Nyumbani/Client/src/Modules/Upload/Form_upload.js":"12","/data/data/com.termux/files/home/Nyumbani/Client/src/Modules/Upload/ImageUpload.js":"13","/data/data/com.termux/files/home/Nyumbani/Client/src/Modules/Upload/rntl_input.js":"14"},{"size":3955,"mtime":1693912651061,"results":"15","hashOfConfig":"16"},{"size":953,"mtime":1692627617936,"results":"17","hashOfConfig":"16"},{"size":2678,"mtime":1692627617936,"results":"18","hashOfConfig":"16"},{"size":521,"mtime":1692627617936,"results":"19","hashOfConfig":"16"},{"size":4482,"mtime":1692693710015,"results":"20","hashOfConfig":"16"},{"size":594,"mtime":1692627617928,"results":"21","hashOfConfig":"16"},{"size":4005,"mtime":1693912968353,"results":"22","hashOfConfig":"16"},{"size":252,"mtime":1692627617944,"results":"23","hashOfConfig":"16"},{"size":2176,"mtime":1692690698949,"results":"24","hashOfConfig":"16"},{"size":2939,"mtime":1692632251244,"results":"25","hashOfConfig":"16"},{"size":2101,"mtime":1692693586723,"results":"26","hashOfConfig":"16"},{"size":15567,"mtime":1693538096047,"results":"27","hashOfConfig":"16"},{"size":4860,"mtime":1693897526512,"results":"28","hashOfConfig":"16"},{"size":13200,"mtime":1694526285812,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},"17tgy2",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"34"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},"/data/data/com.termux/files/home/Nyumbani/Client/src/index.js",["86","87"],[],"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Feed } from './Components/Feed/Feed';\nimport { Header } from './Components/Header/Header';\nimport { Modal } from './Components/Modal/Modal';\nimport { Map } from './Components/Map/Map';\nimport './style.css';\nimport {Menu} from './Components/Header/Menu/Menu';\nimport {Icons} from './Assets/Icons/Icons';\n\nconst getScreenSize = () => {\n  const width = window.innerWidth;\n  if (width <= 768) return 'mobile';\n  if (width <= 1024) return 'laptop';\n  return 'larger';\n};\n\nconst App = () => {\n  const [modal, setModal] = useState(false);\n  const [menu, setMenu] = useState(false);\n  const [mapped, setMap] = useState(false);\n  const [screenSize, setScreenSize] = useState(getScreenSize());\n  const [modalData, setModalData] = useState(null);\n  const feedContainerRef = useRef(null);\n  const [feedItemsCount, setFeedItemsCount] = useState(50);\n  const maxFeeds = 150;\n  const stepSize = 50;\n\n  const toggleModal = useCallback(() => {\n    setModal((prevModal) => !prevModal);\n  }, []);\n\n  const toggleModalWithData = useCallback((data) => {\n    setModalData(data);\n    toggleModal();\n  }, [toggleModal]);\n\n  const toggleMap = useCallback(() => {\n    setMap((prevMap) => !prevMap);\n  }, []);\n  \n  const toggleMenu = useCallback(() => {\n    setMenu((prevMenu) => !prevMenu); \n  }, []); \n\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: `0px 0px ${10 * feedContainerRef.current?.clientHeight}px 0px`,\n      threshold: 1,\n    };\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          if (entry.target === feedContainerRef.current?.lastElementChild) {\n            loadMoreFeeds();\n          }\n        }\n      });\n    }, options);\n\n    if (feedContainerRef.current) {\n      observer.observe(feedContainerRef.current.lastElementChild);\n    }\n\n    return () => {\n      if (feedContainerRef.current) {\n        observer.unobserve(feedContainerRef.current.lastElementChild);\n      }\n    };\n  }, [feedItemsCount]);\n\n  const handleResize = () => {\n    setScreenSize(getScreenSize());\n  };\n\n  const loadMoreFeeds = () => {\n    if (feedItemsCount <= maxFeeds) {\n      setFeedItemsCount((prevCount) => Math.min(prevCount + stepSize, maxFeeds));\n    }\n  };\n\n  return (\n    <div className='ui'>\n      <div data-container='scroll' className='feeds-container'>\n        \n        <div data-container='map' className={`map-${screenSize}`} data-shown={`${screenSize === 'mobile' && !mapped ? 'hidden' : 'shown'}`} >\n          <Map toggleModal={toggleModal} />\n        </div>\n        \n        <div className={`feed-${screenSize}`} ref={feedContainerRef} data-container='feed' data-shown={`${screenSize !== 'mobile' || !mapped ? 'shown' : 'hidden'}`}>\n        {<Header modal={modal} toggleMenu={toggleMenu} screenSize={screenSize} />}\n          {[...Array(feedItemsCount)].map((_, index) => (\n            <Feed key={index} count={index + 1} toggleModal={toggleModal} toggleModalWithData={toggleModalWithData} />\n          ))}\n        </div>\n      </div>\n\n      {screenSize === 'mobile' && (\n          <button className='map-toggle-button' onClick={toggleMap}>\n            {!mapped ? ( <div> <img src={Icons.map} alt=\"Map Icon\" /> Map</div> ) : (<div><img src={Icons.card_list} alt=\"Card List Icon\" /> List</div>)}\n          </button>\n        )}\n      \n      {menu && <Menu screen={screenSize} toggleMenu={toggleMenu}/>}\n      \n      {modal && <Modal screen={screenSize} toggleModal={toggleModal} modalData={modalData} />}\n      \n    </div>\n  );\n};\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>\n);\n",[],"/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Modal/Modal.js",[],[],"/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Header/Header.js",["88"],[],"import React, { Component } from 'react';\nimport { Menu } from './Menu/Menu';\nimport './Style.css';\nimport {Icons} from '../../Assets/Icons/Icons';\n\nexport class Header extends Component {\n  constructor(props) {\n    super(props);\n    this.mainHeaderRef = React.createRef();\n    this.state = {\n      showMiniHeader: false,\n    };\n  }\n\n  componentDidMount() {\n    const feedContainer = document.querySelector('[data-container=\"scroll\"]');\n    feedContainer.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    const feedContainer = document.querySelector('[data-container=\"scroll\"]');\n    feedContainer.removeEventListener('scroll', this.handleScroll);\n  }\n\n  handleScroll = () => {\n  const mainHeaderHeight = this.mainHeaderRef.current?.clientHeight || 0;\n  const scrollThreshold = 50;\n  const currentScrollY = document.querySelector('[data-container=\"scroll\"]').scrollTop;\n\n  if (currentScrollY > mainHeaderHeight) {\n    this.setState({ showMiniHeader: true });\n  } else if (currentScrollY < mainHeaderHeight + scrollThreshold) {\n    this.setState({ showMiniHeader: false });\n  }\n};\n\n\n  render() {\n    const { modal, screenSize, toggleMenu } = this.props;\n    const { showMiniHeader } = this.state;\n\n    if (modal && screenSize === 'mobile') {\n      return null;\n    }\n\n    return (\n      <div className=\"header\">\n        <MainHeader ref={this.mainHeaderRef} toggleMenu={toggleMenu} />\n        <MiniHeader showMiniHeader={showMiniHeader} />\n      </div>\n    );\n  }\n}\n\nconst MainHeader = React.forwardRef((props, ref) => {\n  const handleMenuClick = () => {\n    props.toggleMenu();\n  };\n\n\n  return (\n    <div className='main-header' ref={ref}>\n      <div className='logo-header'>\n        <div className='logo'>Nyumbani</div>\n        <div className='menu'>\n          <img onClick={handleMenuClick} className='icon' src={Icons.user} alt=\"Icon 1\" />\n          <img onClick={handleMenuClick} className='icon' src={Icons.menu} alt=\"Icon 1\" />\n        </div>\n      </div>\n      <div className='filter-header'>\n        <div className='filter-search'>Destination</div>\n        <div className='filter-selection'>\n          <div><b>Sort</b></div>\n          <div><b>Filter</b></div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nconst MiniHeader = ({ showMiniHeader }) => {\n  return (\n    <div className={`mini-header ${showMiniHeader ? 'slide-down' : ''}`}>\n      <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\n      <div>\n        <div className='mini-filter-search'>Destination</div>\n        <div className='mini-filter-selection'>\n          <span><b>Sort</b></span>\n          <span><b>Filter</b></span>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Map/Map.js",["89","90"],[],"import React from 'react';\nexport class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showMap: false,\n    };\n  }\n\n  toggleMap = () => {\n    this.setState({ showMap: !this.state.showMap });\n  }\n\n  render() {\n    const { showMap } = this.state;\n    const { toggleModal } = this.props;\n\n    return (\n      <div>\n        {/*showMap && <Feed toggleModal={toggleModal} />*/}\n        mapped\n        <button onClick={this.toggleMap}>Toggle Map</button>\n      </div>\n    );\n  }\n}\n","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/Feed.js",["91"],[],"import React, { Component } from 'react';\nimport './Style.css';\nimport './Loading.css';\nimport { FeedInfo } from './FeedInfo/FeedInfo';\nimport { FeedPhotos } from './FeedPhotos/FeedPhotos';\nimport { FeedReviews } from './FeedReviews/FeedReviews';\nimport { FeedMap } from './FeedMap/FeedMap';\nimport { Icons } from '../../Assets/Icons/Icons';\n\nexport class Feed extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      extendedDetailing: false,\n      shownInfo: false,\n      activeSpan: 0,\n      rentalData: null,\n    };\n    this.spanRefs = Array(4).fill(null).map(() => React.createRef());\n  }\n  \n  API_URL = \"http://localhost:5000\";\n\n  async componentDidMount() {\n    try {\n      const response = await fetch(`${this.API_URL}/api/rental/`);\n      const data = await response.json();\n      const firstRental = data[0]; \n      this.setState({ rentalData: firstRental, loading: false });\n    } catch (error) {\n      console.error('Error fetching rental data:', error);\n      this.setState({ loading: false });\n    }\n  }\n\n  handleSpanClick = (index) => {\n    this.setState({ activeSpan: index });\n  };\n\n  toggleShowInfo = () => {\n    this.setState((prevState) => ({ shownInfo: !prevState.shownInfo }));\n  };\n\n  render() {\n    const { loading, shownInfo, activeSpan, rentalData } = this.state;\n\n    if (loading || !rentalData) {\n      return null\n    }\n\n    const {_id, name, location, thumbnailImage, information, userReviews } = rentalData;\n    const { toggleModal, toggleModalWithData } = this.props;\n\n    return (\n      <div feed={loading && 'loading'} className='feed-container'>\n        <div className='displayed-feed-container'>\n          <div className='displayed-feed-header'>\n            <div className='feed-image-container'>\n              <img srcset=\"\" src={thumbnailImage} alt=\"rental thumbnail\"/>\n            </div>\n            <div className='feed-like-button'>\n              <i className=\"fa fa-heart-o\" aria-hidden=\"true\"></i>\n            </div>\n          </div>\n        \n          <div className='displayed-feed-body'>\n            <div className='feed-info category dashed'>\n              <span>{this.props.count}</span>\n              <span></span>\n            </div>\n            <div className='feed-info name dashed'>\n              <h1>{name}</h1>\n            </div>\n            <div className='feed-info rating dashed'>\n              <span><b>{userReviews.rating}</b> - {userReviews.grading} ({userReviews.usersRated})</span>\n              <span> <i className=\"fa fa-map-marker\" aria-hidden=\"true\"></i> <b>{location.residence}</b></span>\n            </div>\n          </div>\n        \n          <div className='displayed-feed-footer'>\n            <div className='feed-selection'>\n              <b>{information.houseCategory}</b>\n              <div>\n                {information.vacant\n                  ? information.numberOfHousesVacant + ' vacant' : 'No vacancy!'}\n              </div>\n              <div className='feed-select price'><h1>{information.pricing.price}</h1></div>\n              <div className='feed-select view'>\n                <button onClick={this.toggleShowInfo}>\n                  {!shownInfo ? ( <span><b>View Rental</b></span>\n                  ) : (<span><b> Show less </b></span>)}\n                </button>\n              </div>\n            </div>\n          </div>\n        \n          <div className='feed-info-more'>\n            <span>here <b>hello</b></span>\n          </div>\n        </div>\n\n        {shownInfo && (\n          <div className={`feed-information-container ${shownInfo && 'slide-down'}`}>\n            <div className='feed-information-header'>\n              {['Info', 'Photos', 'Map', 'Review'].map((text, index) => (\n                <span key={index} ref={this.spanRefs[index]} className={activeSpan === index ? 'active' : ''} onClick={() => this.handleSpanClick(index)} > {text} </span> ))}\n            </div>\n            <div className='feed-information-body'>\n              {activeSpan === 0 && <FeedInfo  id={_id}/>}\n              {activeSpan === 1 && <FeedPhotos id={_id}/>}\n              {activeSpan === 3 && <FeedReviews id={_id} toggleModal={toggleModal} toggleModalWithData={toggleModalWithData}/>}\n              {activeSpan === 2 && <FeedMap id={_id}/>}\n            </div>\n            <div className='feed-information-footer'>\n              <button onClick={this.toggleShowInfo}>close</button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","/data/data/com.termux/files/home/Nyumbani/Client/src/Assets/Icons/Icons.js",[],[],"/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Header/Menu/Menu.js",["92","93","94","95","96"],[],"import React from 'react';\nimport './Style.css';\nimport {Icons} from '../../../Assets/Icons/Icons';\nimport RentalForm from '../../../Modules/Upload/rntl_input';\n\nexport class Menu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeItem: 'Options',\n    };\n  }\n\n  handleItemClick = (item) => {\n    if (this.state.activeItem === item) {\n      if (item === 'Options') {\n        this.props.toggleMenu();\n      } else {\n        this.setState({ activeItem: 'Options' });\n      }\n    } else {\n      this.setState({ activeItem: item });\n    }\n  };\n\n  renderMenuItemContent = () => {\n    const { activeItem } = this.state;\n\n    switch (activeItem) {\n      case 'Options':\n        return (\n          <div className='options'>\n            <div onClick={() => this.handleItemClick('Recently viewed')} className={activeItem === 'Recently viewed' ? 'active' : ''}>\n              Recently viewed <img className='icon' src={Icons.right}/>\n            </div>\n            <div onClick={() => this.handleItemClick('Help and support')} className={activeItem === 'Help and support' ? 'active' : ''}>\n              Help and support <img className='icon' src={Icons.right} />\n            </div>\n            <div onClick={() => this.handleItemClick('Affiliation')} className={activeItem === 'Affiliation' ? 'active' : ''}>\n              Affiliation <img className='icon' src={Icons.right} />\n            </div>\n            <div onClick={() => this.handleItemClick('Settings')} className={activeItem === 'Settings' ? 'mar active' : 'mar'}>\n              <b>Settings</b>\n            </div>\n            <div onClick={() => this.handleItemClick('Account Settings')} className={activeItem === 'Account Settings' ? 'active' : ''}>\n              Account Settings <img className='icon' src={Icons.right}/>\n            </div>\n            <div onClick={() => this.handleItemClick('Language')} className={activeItem === 'Language' ? 'active' : ''}>\n              Language \n            </div>\n            <div onClick={() => this.handleItemClick('Upload_form')} className={activeItem === 'Upload_form' ? 'active' : ''}>\n              Host rental \n            </div>\n            <div onClick={() => this.handleItemClick('Log out')} className={activeItem === 'Log out' ? 'active' : ''}>\n              <b>Log out</b>\n            </div>\n          </div>\n        );\n      case 'Language':\n        return <LanguageComponent />;\n      case 'Account Settings':\n        return <AccountSettingsComponent />;\n      case 'Recently viewed':\n        return <RecentlyReviewedComponent />;\n      case 'Help and support':\n        return <HelpAndSupportComponent />;\n      case 'Log out':\n        return <LogOutComponent />;\n      case 'Affiliation':\n        return <AffiliationComponent />;\n        case 'Upload_form':\n        return <RentalForm />;\n      default:\n        return null;\n    }\n  };\n\n  render() {\n    const { screen, toggleMenu } = this.props;\n\n    return (\n      <div className={`menu ${screen}`}>\n        <div className='menu-header'>\n          <span onClick={() => this.handleItemClick('Options')} className='menu-close-button dashed'>\n            <img className='icon' src={Icons.close} alt=\"Icon 1\" />\n          </span>\n          <h5 className='menu-header-heading'>Menu</h5>\n        </div>\n        <div className='menu-body'>\n          {this.renderMenuItemContent()}\n        </div>\n      </div>\n    );\n  }\n}\n\n// Example components to render when menu items are clicked\nconst LanguageComponent = () => <div>\n  <h5> Language </h5>\n</div>;\nconst AccountSettingsComponent = () => <div>\n  <h5> Account Settings</h5>\n  <div className='form'>\n    <span>Personal Information</span>\n    \n  </div>\n</div>;\nconst RecentlyReviewedComponent = () => <div>\n  <h5>Recently Reviewed</h5>\n</div>;\nconst HelpAndSupportComponent = () => <div>\n  <h5>Help and Support</h5>\n</div>;\nconst LogOutComponent = () => <div>Log Out Component</div>;\nconst AffiliationComponent = () => <div>\n  <h5>Affiliation </h5>\n</div>;\n","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedMap/FeedMap.js",["97","98"],[],"import {useRef, useState} from 'react';\nimport './Style.css';\nimport './Loading.css';\n\nexport const FeedMap = ()=>{\n  const [loading, setLoading] = useState(true);\n  \n return (\n   <div feed={loading && 'loading'} className='feed-map'>\n   </div>\n    )\n}","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedInfo/FeedInfo.js",[],[],"/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedPhotos/FeedPhotos.js",["99","100"],[],"import { useRef, useState, useEffect } from 'react';\nimport './Style.css';\nimport './Loading.css';\n\nexport const FeedPhotos = ({ id }) => {\n  const [loading, setLoading] = useState(true);\n  const [photos, setPhotos] = useState([]);\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n\n  useEffect(() => {\n    const fetchPhotos = async () => {\n      try {\n        const response = await fetch(`/api/photos/${id}`);\n        const photosData = await response.json();\n        setPhotos(photosData);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching photos:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchPhotos();\n  }, [id]);\n\n  const handleLikeClick = async (photoId) => {\n    try {\n      const response = await fetch(`/api/photos/${photoId}/like`, {\n        method: 'POST',\n      });\n\n      if (response.ok) {\n        setPhotos((prevPhotos) =>\n          prevPhotos.map((photo) =>\n            photo._id === photoId ? { ...photo, likes: photo.likes + 1 } : photo\n          )\n        );\n      }\n    } catch (error) {\n      console.error('Error liking photo:', error);\n    }\n  };\n\n  const handlePrevPhoto = () => {\n    setCurrentPhotoIndex((prevIndex) => (prevIndex === 0 ? photos.length - 1 : prevIndex - 1));\n  };\n\n  const handleNextPhoto = () => {\n    setCurrentPhotoIndex((prevIndex) => (prevIndex === photos.length - 1 ? 0 : prevIndex + 1));\n  };\n\n  return (\n    <div feed={loading && 'loading'} className='feed-information'>\n      <div className='feed-info-details'>\n        {loading ? (\n          <div className='loading-spinner'>Loading...</div>\n        ) : (\n          photos.map((photo, index) => (\n            <div key={index} className={`photo-container ${index === currentPhotoIndex ? 'active' : ''}`}>\n              <a href={photo.imageUrl} target='_blank' rel='noopener noreferrer'>\n                <img src={photo.imageUrl} alt={`Photo ${index}`} />\n              </a>\n              <div className='photo-details'>\n                <span>Likes: {photo.likes}</span>\n                <span>Date Posted: {photo.datePosted}</span>\n                {photo.links && (\n                  <ul>\n                    {photo.links.map((link, linkIndex) => (\n                      <li key={linkIndex}>\n                        <a href={link} target='_blank' rel='noopener noreferrer'>\n                          Link {linkIndex + 1}\n                        </a>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </div>\n              <button onClick={() => handleLikeClick(photo._id)}>Like</button>\n            </div>\n          ))\n        )}\n        <button className='prev-button' onClick={handlePrevPhoto}>\n          Previous\n        </button>\n        <button className='next-button' onClick={handleNextPhoto}>\n          Next\n        </button>\n      </div>\n      <div className='feed-info-map'></div>\n    </div>\n  );\n};\n","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedReviews/FeedReviews.js",["101"],[],"import React, { useState, useEffect } from 'react';\nimport './Style.css';\nimport './Loading.css';\nimport { Modal } from '../../Modal/Modal';\n\nconst Review = ({ userRating, reviewMessage, date }) => {\n  return (\n    <div>\n      <h3>{userRating}</h3>\n      <p>{reviewMessage}</p>\n      <p>{date}</p>\n    </div>\n  );\n};\n\nexport const FeedReviews = ({ id }) => {\n  const [reviews, setReviews] = useState([]);\n  const [showAllReviews, setShowAllReviews] = useState(false);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  const API_URL = \"http://localhost:5000\"; \n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(`${API_URL}/api/reviews/`);\n        const data = await response.json();\n        setReviews(data[0].userReviews.reviews);\n        setLoading(false); // Set loading to false after fetching data\n      } catch (error) {\n        console.error('Error fetching reviews:', error);\n      }\n    }\n    fetchData();\n  }, [id]);\n\n  const toggleReviews = () => {\n    setShowAllReviews(!showAllReviews);\n  };\n\n  return (\n    <div  className={`reviews-container ${showAllReviews ? 'expanded' : ''}`}>\n      {loading ? (\n        <div feed={loading && 'loading'} className='reviews-container'></div>\n      ) : showAllReviews ? (\n        // Show all reviews when expanded\n        reviews.map((review, index) => (\n          <div key={index}>\n            <Review\n              userRating={review.userRating}\n              reviewMessage={review.reviewMessage}\n              date={review.date}\n            />\n          </div>\n        ))\n      ) : (\n        // Show only the first review initially\n        <div>\n          <Review\n            userRating={reviews[0].userRating}\n            reviewMessage={reviews[0].reviewMessage}\n            date={reviews[0].date}\n          />\n        </div>\n      )}\n      {!loading && (\n      <div className=\"display-more-button\">\n        <span onClick={toggleReviews}>\n          <b>{showAllReviews ? 'Show less reviews' : 'Show more reviews'}</b>\n        </span>\n      </div>\n      )}\n    </div>\n  );\n};\n","/data/data/com.termux/files/home/Nyumbani/Client/src/Modules/Upload/Form_upload.js",["102","103","104","105","106","107"],[],"import React, { Component } from 'react';\nimport './Style.css';\nimport axios from 'axios';\n\nclass CreateForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      step: 1,\n      updatedInformation:{},\n      formData: {\n        name: '',\n        location: {\n          latitude: '',\n          longitude: '',\n          residence: '',\n        },\n      },\n      agency: false,\n      agencyDetails: '',\n      decodedRules: [],\n      houseCategory: '',\n      pricing: {\n        price: '',\n        rentDueDate: '',\n        fineIfRentExceeded: '',\n      },\n      currentImage: { Image: '', links: {} },\n      images: [],\n      amenitiesSuggestions: [\n        'wifi',\n        'pets',\n        'water',\n        'pool',\n        'socials',\n      ],\n      selectedAmenities: [],\n      contactPlatformSuggestions: [\n        'WhatsApp',\n        'Instagram',\n        'Facebook',\n      ],\n      selectedContacts: {},\n      contactPlatformDetail: '',\n      rentFine: false,\n      rulesText: '',\n      houseCategorySuggestions: [\n        'Single Room',\n        'Bedsitter',\n        'Two Rooms',\n        'One Bedroom',\n        // Add more house categories...\n      ],\n    };\n  }\n  \n  handleInputChange = (field, value) => {\n    this.setState(prevState => ({\n      formData: {\n        ...prevState.formData,\n        [field]: value,\n      },\n    }));\n  };\n\n  handleLocationChange = (field, value) => {\n    this.setState(prevState => ({\n      formData: {\n        ...prevState.formData,\n        location: {\n          ...prevState.formData.location,\n          [field]: value,\n        },\n      },\n    }));\n  };\n\n  handleImageChange = event => {\n    const image = event.target.files[0];\n    this.setState(prevState => ({ currentImage: { Image: image, links: {}, }, }));\n    };\n  \n  handleAddLink = () => {\n    const { links } = this.state.currentImage;\n    const linkCount = Object.keys(links).length;\n    if (linkCount < 5) {\n      this.setState(prevState => ({\n        currentImage: { ...prevState.currentImage, links: { ...prevState.currentImage.links, [`link${linkCount + 1}`]: '', }, }, }));\n    } \n  };\n\n  handleLinkChange = (key, value) => {\n    this.setState(prevState => ({\n      currentImage: {\n        ...prevState.currentImage,\n        links: {\n          ...prevState.currentImage.links,\n          [key]: value,\n        },\n      },\n    }));\n  };\n\n  handleRemoveLink = key => {\n    const { [key]: _, ...remainingLinks } = this.state.currentImage.links; this.setState(prevState => ({ currentImage: { ...prevState.currentImage, links: remainingLinks, }, })); }; \n\n  handleUploadImage = () => {\n    const { currentImage } = this.state;\n    if (currentImage.Image) {\n      this.setState(prevState => ({\n        images: [...prevState.images, currentImage],\n        currentImage: { Image: '', links: {} },\n      }));\n    }\n  };\n\n  handleRemoveImage = index => {\n    const updatedImages = this.state.images.filter((_, i) => i !== index);\n    this.setState({\n      images: updatedImages,\n    });\n  };\n\n  handleAmenitiesChange = event => {\n    const amenity = event.target.value;\n    if (amenity && this.state.amenitiesSuggestions.includes(amenity)) {\n      this.setState(prevState => ({\n        selectedAmenities: [...prevState.selectedAmenities, amenity],\n        amenitiesSuggestions: prevState.amenitiesSuggestions.filter(\n          item => item !== amenity\n        ),\n      }));\n      event.target.value = '';\n    }\n  };\n\n  handleRemoveAmenity = amenity => {\n    this.setState(prevState => ({\n      selectedAmenities: prevState.selectedAmenities.filter(\n        item => item !== amenity\n      ),\n      amenitiesSuggestions: [...prevState.amenitiesSuggestions, amenity],\n    }));\n  };\n\n  selectContactPlatform = event => {\n    const platform = event.target.value; this.setState({ contactPlatformDetail: '', }); if (platform && this.state.contactPlatformSuggestions.includes(platform)) { this.setState(prevState => ({ selectedContacts: { ...prevState.selectedContacts, [platform]: '', }, contactPlatformSuggestions: prevState.contactPlatformSuggestions.filter( item => item !== platform ), contactPlatformDetail: '', })); } }; \n    \n  handleRulesTextChange = event => {\n  this.setState({\n    rulesText: event.target.value,\n  });\n};\n\n  handleRemoveContactPlatform = platform => {\n    const updatedContacts = { ...this.state.selectedContacts };\n    delete updatedContacts[platform];\n    this.setState(prevState => ({\n      selectedContacts: updatedContacts,\n      contactPlatformSuggestions: [\n        ...prevState.contactPlatformSuggestions,\n        platform,\n      ],\n    }));\n  };\n\n  handleContactPlatformDetailChange = (platform, value) => {\n    this.setState(prevState => ({ selectedContacts: { ...prevState.selectedContacts, [platform]: value, }, })); };\n    \n  handlePricingChange = (field, value) => {\n    this.setState(prevState => ({\n      pricing: {\n        ...prevState.pricing,\n        [field]: value,\n      },\n    }));\n  };\n\n  handleRentFineChange = () => {\n    this.setState(prevState => ({\n      rentFine: !prevState.rentFine,\n    }));\n  };\n\n  handleAgencyChange = () => {\n    this.setState(prevState => ({\n      agency: !prevState.agency,\n    }));\n  };\n\n  handleAgencyDetailsChange = value => {\n    this.setState({\n      agencyDetails: value,\n    });\n  };\n\n  handleRulesTextChange = event => {\n    const newText = event.target.value.replace(/^# /gm, ''); const formattedText = newText .split('\\n') .map(line => `# ${line}`) .join('\\n'); this.setState({ rulesText: formattedText, }); };\n    \n  handleHouseCategoryChange = value => {\n    this.setState({\n      houseCategory: value,\n    });\n  };\n\n  handleNextStep = data => {\n    const { step } = this.state;\n    const isStepValid = this.validateStep(step);\n    if (isStepValid) {\n      this.setState({\n        formData: { ...this.state.formData, ...data },\n        step: step + 1,\n      });\n    }\n  };\n\n  handlePrevStep = () => {\n    this.setState(prevState => ({\n      step: prevState.step - 1,\n    }));\n  };\n\n  validateStep = step => {\n    const inputs = document.querySelectorAll(`.form-step.step${step} [data-needed='required']`);\n    let isValid = true;\n\n    inputs.forEach(input => {\n      if (!input.value) {\n        isValid = true;\n        input.classList.add('invalid-input');\n      } else {\n        input.classList.remove('invalid-input');\n      }\n    });\n\n    return isValid;\n  };\n\n  handleSubmit = () => {\n    const parsedRules = this.state.decodedRules.map(rule => rule.slice(1));\n    /*if (this.state.agency) {\n      updatedInformation.details.agencyDetails = this.state.agencyDetails;}*/\n    \n    \n    let API_URL = \"\";\n    \n    axios\n      .post(`${API_URL}/api/submit/`, this.updatedInformation)\n      .then(response => {\n        alert('Form submitted successfully!');\n        console.log(response.data);\n      })\n      .catch(error => {\n        alert('An error occurred while submitting the form.');\n        console.error(error);\n      });\n  };\n\n  componentDidMount() {\n    this.setState({\n      rulesText: '# ',\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.rulesText !== this.state.rulesText) {\n      const rules = this.state.rulesText.split('\\n').map(rule => rule.trim());\n      const decodedRules = rules.filter(rule => rule.startsWith('#'));\n      this.setState({\n        decodedRules,\n      });\n    }\n  }\n\n  render() {\n  const { step, formData, currentImage, images, amenitiesSuggestions, selectedAmenities,  contactPlatformSuggestions, selectedContacts, pricing, rentFine, agency, agencyDetails, rulesText, houseCategory, houseCategorySuggestions } = this.state;\n\n  return (\n    <div className=\"create-form-container\">\n      {step === 1 && (\n        <div className=\"form-step step1\">\n          <h3>Rental Information</h3>\n          <input data-needed=\"required\" type=\"text\" placeholder=\"Name\" value={formData.name} onChange={(e) => this.handleInputChange('name', e.target.value)} />\n          <input data-needed=\"required\" type=\"text\" placeholder=\"Latitude\" value={formData.location.latitude} onChange={(e) => this.handleLocationChange('latitude', e.target.value)} />\n          <input data-needed=\"required\" type=\"text\" placeholder=\"Longitude\" value={formData.location.longitude} onChange={(e) => this.handleLocationChange('longitude', e.target.value)} />\n          <input data-needed=\"required\" type=\"text\" placeholder=\"Residence\" value={formData.location.residence} onChange={(e) => this.handleLocationChange('residence', e.target.value)} />\n          <div className=\"form-control\">\n            <button className=\"next-button\" onClick={() => this.handleNextStep(1)}>Next</button>\n          </div>\n        </div>\n      )}\n      {step === 2 && (\n        <div className=\"form-step step2\">\n          <h2>Upload images of the rental</h2>\n          <div className=\"image-upload\">\n            <input data-needed=\"required\" hidden id='image-upload' type=\"file\" accept=\"image/*\" onChange={this.handleImageChange} />\n            <label className='input-label' htmlFor='image-upload'>Click to upload an image</label>\n            <button className='upload-button' onClick={this.handleUploadImage}>Upload Image</button>\n          </div>\n          {currentImage.Image && (\n            <div className=\"image-data\">\n              <img src={URL.createObjectURL(currentImage.Image)} alt=\"Uploaded\" />\n              <div className=\"link-inputs\">\n                {Object.entries(currentImage.links).map(([key, value], index) => (\n                  <div key={key}>\n                    <input data-needed=\"required\" type=\"text\" placeholder={`Link ${index + 1}`} value={value} onChange={(e) => this.handleLinkChange(key, e.target.value)} />\n                    <button onClick={() => this.handleRemoveLink(key)}>Remove</button>\n                  </div>\n                ))}\n                <button className='image-link' onClick={this.handleAddLink}>Add Link</button>\n              </div>\n            </div>\n          )}\n          <div className=\"uploaded-images\">\n            {images.length > 0 && (\n              <>\n                <h3>Uploaded Images: {images.length}</h3>\n                {images.map((image, index) => (\n                  <div key={index} className=\"uploaded-image\">\n                    <img src={URL.createObjectURL(image.Image)} alt={`Image ${index + 1}`} />\n                    {Object.entries(image.links).map(([key, value], linkIndex) => (\n                      <p key={key}>Link {linkIndex + 1}: {value}</p>\n                    ))}\n                    <p>Date: {image.Date}</p>\n                    <p>srcUser: {image.srcUser}</p>\n                    <button onClick={() => this.handleRemoveImage(index)}>Remove</button>\n                  </div>\n                ))}\n              </>\n            )}\n          </div>\n          <div className=\"form-control\">\n            <button className=\"prev-button\" onClick={this.handlePrevStep}>Back</button>\n            <button className=\"next-button\" onClick={() => this.handleNextStep(2)}>Next</button>\n          </div>\n        </div>\n      )}\n      \n      {step === 3 && (\n        <div className=\"form-step step3\">\n          <h2>Step 3: Information</h2>\n          <div className=\"amenities\">\n            <h3>Amenities</h3>\n            <input type=\"text\" onChange={this.handleAmenitiesChange} placeholder=\"Add Amenities\" list=\"amenities-suggestions\" data-needed=\"required\" />\n            <datalist id=\"amenities-suggestions\">\n            {amenitiesSuggestions.map((amenity, index) => (\n            <option key={index} value={amenity} />))}\n            </datalist>\n            <div className=\"amenities-list\">\n              {selectedAmenities.map((amenity, index) => (<span key={index}> {amenity} \n              <button onClick={() => this.handleRemoveAmenity(amenity)}> Remove </button>\n              </span> ))}\n            </div>\n          </div>\n          \n          <div className=\"contact\">\n            <h3>Contact</h3>\n            <input type=\"text\" onChange={this.selectContactPlatform} list=\"contact-suggestions\" placeholder=\"Select Contact Platform\" data-needed=\"required\" />\n            <datalist id=\"contact-suggestions\">\n              {contactPlatformSuggestions.map((platform, index) => ( <option key={index} value={platform} /> ))}\n            </datalist>\n            <div className=\"selected-contacts\">\n            {Object.keys(selectedContacts).map((platform, index) => (\n              <div key={index} className=\"contact-platform\">\n              {platform}\n                <button onClick={() => this.handleRemoveContactPlatform(platform)}> Remove </button>\n                <input type=\"text\" value={selectedContacts[platform]} onChange={(e) =>\n                this.handleContactPlatformDetailChange(platform, e.target.value)} placeholder={`Enter ${platform} details`} data-needed=\"required\"/>\n              </div> ))}\n            </div>\n          </div>\n          \n          <div className=\"pricing\">\n            <h3>Pricing</h3>\n            <div>\n              <label>Price:</label>\n              <input type=\"number\" value={pricing.price} onChange={(e) =>this.handlePricingChange(\"price\", e.target.value) } data-needed=\"required\" />\n            </div>\n            \n            <div>\n              <label>Rent Due Date:</label>\n              <input type=\"text\" value={pricing.rentDueDate} onChange={(e) => this.handlePricingChange(\"rentDueDate\", e.target.value) } data-needed=\"required\" />\n            </div>\n            \n            <div>\n              <label>\n                <input type=\"checkbox\" checked={rentFine} onChange={this.handleRentFineChange} /> Rent Fine </label>\n            </div>\n            {rentFine && (\n              <div>\n                <label>Fine if Rent Exceeded:</label>\n                <input type=\"number\" value={pricing.fineIfRentExceeded} onChange={(e) => this.handlePricingChange(\"fineIfRentExceeded\", e.target.value)} data-needed=\"required\" />\n              </div>\n            )}\n          </div>\n          \n          \n          <div className=\"agency\">\n            <h3>Agency</h3>\n            <div>\n              <label> <input type=\"checkbox\" checked={agency} onChange={this.handleAgencyChange} /> ABC Rentals\n              </label>\n            </div>\n            {agency && (\n              <div>\n                <input type=\"text\" value={agencyDetails} onChange={(e) => this.handleInputChange(\"agencyDetails\", e.target.value)} placeholder=\"Agency Details\" data-needed=\"required\"/>\n              </div>\n            )}\n        </div>\n        \n        <div className=\"rules\">\n          <h3>Rules</h3>\n          <div>\n            <label>Rules:</label>\n            <textarea rows=\"4\" value={rulesText} onChange={this.handleRulesTextChange} data-needed=\"required\"></textarea>\n          </div>\n        </div>\n        \n        <div className=\"house-category\">\n          <h3>House Category</h3>\n          <div>\n            <label>House Category:</label>\n            <input type=\"text\" value={houseCategory}\n            onChange={(e) =>this.handleInputChange(\"houseCategory\", e.target.value)}list=\"house-suggestions\"data-needed=\"required\" />\n            <datalist id=\"house-suggestions\"> {houseCategorySuggestions.map((suggestion, index) => ( <option key={index} value={suggestion} />))}\n            </datalist>\n          </div>\n        </div>\n        \n        <div className=\"form-control\">\n          <button className=\"prev-button\" onClick={this.handlePrevStep}>Back</button>\n          <button className=\"next-button\" onClick={this.handleSubmit}>Submit</button>\n        </div>\n        \n      </div>)}\n\n    </div>\n  );\n}\n\n}\n\nexport default CreateForm;\n",[],"/data/data/com.termux/files/home/Nyumbani/Client/src/Modules/Upload/ImageUpload.js",["108"],[],"import React, { useState, useEffect } from 'react';\nimport EXIF from 'exif-js'; // Import the exif-parser library\nimport './Style.css';\n\nconst imagePlaceholder='https://uploader-assets.s3.ap-south-1.amazonaws.com/codepen-default-placeholder.png';\n\nfunction ImageUpload() {\n  const [imgSrc, setImgSrc] = useState(imagePlaceholder);\n  const [imgList, setImgList] = useState([]);\n  const [activeIndex, setActiveIndex] = useState(null);\n  const [uploadedImages, setUploadedImages] = useState([]);\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n\n    if (file) {\n      const imageSrc = URL.createObjectURL(file);\n\n      // Use exif-js to extract date information\n      EXIF.getData(file, function () {\n        const imageDate = EXIF.getTag(this, 'DateTimeOriginal') || '';\n\n        // Create the uploaded image object\n        const uploadedImage = {\n          src: imageSrc,\n          links: [],\n          uploadDate: Date.now(),\n          imageDate,\n          user: 'admin',\n        };\n\n        // Add the uploaded image to the state\n        setUploadedImages([...uploadedImages, uploadedImage]);\n\n        const newImgList = [...imgList, { src: imageSrc, text: '', showTextarea: false }];\n        setImgList(newImgList);\n        setImgSrc(imageSrc);\n        setActiveIndex(newImgList.length - 1);\n      });\n    }\n  };\n  \n  const handleImageClick = (index) => {\n    setImgSrc(imgList[index].src);\n    setActiveIndex(index);\n  };\n\n  const handleToggleTextarea = (index) => {\n    const newImgList = [...imgList];\n    newImgList[index].showTextarea = !newImgList[index].showTextarea;\n    setImgList(newImgList);\n  };\n\n  \n\n  const handleRemoveImage = (index) => {\n    const newImgList = [...imgList];\n    newImgList.splice(index, 1);\n    setImgList(newImgList);\n\n    if (newImgList.length > 0) {\n      setActiveIndex(0);\n    } else {\n      setActiveIndex(null);\n    }\n\n    const newUploadedImages = [...uploadedImages];\n    newUploadedImages.splice(index, 1);\n    setUploadedImages(newUploadedImages);\n    if (index > 0) {\n      handleImageClick(index - 1);\n    } else{\n      setImgSrc(imagePlaceholder)\n    }\n  };\n\n  const handleTextChange = (index, newText) => {\n    const newImgList = [...imgList];\n    newImgList[index].text = newText;\n\n    // Parse user input for links (assuming links are separated by newlines)\n    const newLinks = newText.split('\\n').map((line) => {\n      return { url: line, description: '' };\n    });\n\n    // Update the links property of the uploaded image\n    const updatedUploadedImage = { ...uploadedImages[index], links: newLinks };\n    const newUploadedImages = [...uploadedImages];\n    newUploadedImages[index] = updatedUploadedImage;\n\n    setImgList(newImgList);\n    setUploadedImages(newUploadedImages);\n  };\n\n\n  return (\n    <div className=\"main-wrapper\">\n      <div className=\"img-upload-plugin\">\n        <div className=\"img-upload-handler\">\n          <div className=\"img-preview-big\">\n            <img src={imgSrc} alt=\"Preview\" />\n            {activeIndex !== null && (\n              <div className=\"img-delete\" onClick={() => handleRemoveImage(activeIndex)}>\n              <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"img-preview-operate\">\n          <div className=\"img-holder\">\n            {imgList.map((img, index) => (\n              <div key={index} className={`img-preview-small ${index === activeIndex ? 'img-small-selected' : ''}`} onClick={() => handleImageClick(index)}>\n                <img src={img.src} alt=\"Preview\" />\n              </div>\n            ))}\n          </div>\n          <button className=\"img-add-more\" onClick={() => document.querySelector('input[type=\"file\"]').click()}>\n            <img src=\"https://uploader-assets.s3.ap-south-1.amazonaws.com/codepen-add-more-btn.png\" alt=\"Add\" />\n          </button>\n        </div>\n        <input type=\"file\" name=\"img-upload-input\" style={{ display: 'none' }} onChange={handleFileChange} />\n      </div>\n      <div className=\"text-preview\">\n        {activeIndex !== null && (\n          <div className=\"formatted-links\">\n            {imgList[activeIndex].showTextarea ? (\n              <textarea\n                value={imgList[activeIndex].text}\n                onChange={(e) => handleTextChange(activeIndex, e.target.value)}\n                placeholder=\"Enter text...\"\n              ></textarea>\n            ) : (\n              imgList[activeIndex].text.split('\\n').map((line, index) => (\n                <p key={index}>{line}</p>\n              ))\n            )}\n            <button className=\"toggle-textarea\" onClick={() => handleToggleTextarea(activeIndex)}>\n              {imgList[activeIndex].showTextarea ? 'Hide' : 'Customize'}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ImageUpload;\n",[],"/data/data/com.termux/files/home/Nyumbani/Client/src/Modules/Upload/rntl_input.js",["109","110","111","112","113","114","115","116","117","118","119","120"],[],"import React,{useState, useRef,useEffect, useCallback} from 'react';\n\nexport function ContactPlatform({ name, options, onChange }) {\n  const [inputValue, setInputValue] = useState('');\n  const [suggestions, setSuggestions] = useState(options);\n  const [selectedSuggestions, setSelectedSuggestions] = useState([]);\n\n  useEffect(() => {\n    onChange(name, selectedSuggestions);\n  }, [selectedSuggestions]);\n\n  useEffect(() => {\n    setSuggestions(options);\n  }, []);\n\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    setInputValue(value);\n\n    if (suggestions.includes(value)) {\n      const updatedSuggestions = suggestions.filter((suggestion) => suggestion !== value);\n      setSuggestions(updatedSuggestions);\n\n      const newContactPlatform = {\n        name: value,\n        text: '', // Initialize an empty text field\n      };\n\n      setSelectedSuggestions([...selectedSuggestions, newContactPlatform]);\n\n      setInputValue('');\n    }\n  };\n\n  const handleRemoveSelected = (selected) => {\n    const updatedSelected = selectedSuggestions.filter((item) => item !== selected);\n    setSuggestions([...suggestions, selected.name]); // Add the removed suggestion back to the list\n    setSelectedSuggestions(updatedSelected);\n  };\n\n  const handleTextChange = (index, newText) => {\n    const updatedSelected = [...selectedSuggestions];\n    updatedSelected[index].text = newText;\n    setSelectedSuggestions(updatedSelected);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        name={name}\n        value={inputValue}\n        onChange={handleInputChange}\n        list=\"suggestions\"\n        placeholder=\"Type here...\"\n      />\n      <datalist id=\"suggestions\">\n        {suggestions.map((suggestion, index) => (\n          <option key={index} value={suggestion} />\n        ))}\n      </datalist>\n      <div>\n        <p>Selected Suggestions:</p>\n        <ul>\n          {selectedSuggestions.map((selected, index) => (\n            <li key={index}>\n              {selected.name}\n              <input\n                type=\"text\"\n                value={selected.text}\n                onChange={(e) => handleTextChange(index, e.target.value)}\n                placeholder=\"Enter text...\"\n              />\n              <button onClick={() => handleRemoveSelected(selected)}>Remove</button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport function AutoInput({name, label, required, type, options, onChange}){\n  const [inputValue, setInputValue] = useState('');\n  const [suggestions, setSuggestions] = useState(options);\n  const [validity, setValidity] = useState(required ? {isValid:false,message:''} : {isValid:true, message: ''});\n  const [selectedSuggestions, setSelectedSuggestions] = useState([]);\n  \n  useEffect(()=>{\n    onChange(name, selectedSuggestions)\n  },[selectedSuggestions])\n  \n  useEffect(()=>{\n    setSuggestions(options)\n  },[])\n  \n\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    setInputValue(value);\n    if (suggestions.includes(value)) {\n      const updatedSuggestions = suggestions.filter((suggestion) => suggestion !== value);\n      setSuggestions(updatedSuggestions);\n\n      setSelectedSuggestions([...selectedSuggestions, value]);\n\n      setInputValue('');\n    }\n    onChange(name, inputValue, validity)\n  };\n\n  const handleRemoveSelected = (selected) => {\n    const updatedSelected = selectedSuggestions.filter((item) => item !== selected);\n    setSelectedSuggestions(updatedSelected);\n\n    setSuggestions([...suggestions, selected]);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" name={name} value={inputValue} onChange={handleInputChange} list=\"suggestions\" placeholder=\"Type here...\"/>\n      <datalist id=\"suggestions\">\n        {suggestions.map((suggestion, index) => (\n          <option key={index} value={suggestion} />\n        ))}\n      </datalist>\n      <div>\n        <p>Selected Suggestions:</p>\n        <ul>\n          {selectedSuggestions.map((selected, index) => (\n            <li key={index}>\n              {selected}\n              <button onClick={() => handleRemoveSelected(selected)}>Remove</button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport function FormInput({name, defaultValue, label,required, type, onChange}) {\n  const [value, setValue] = useState(defaultValue || '');\n  const [validity, setValidity] = useState(required ? {isValid:false,message:''} : {isValid:true, message: ''});/*valid in this case is an object*/\n\n  const handleChange = (e) => {\n    if(defaultValue){\n      setValue(defaultValue);\n      return\n    }\n    setValue((prevValue)=>e.target.value);\n    setValidity(validate(name,type,required,e.target.value))\n    onChange(name, e.target.value, validity);\n  };\n  \n  \n  return (\n    <div className={`form-input-container ${!validity.isValid && 'invalid'}`}>\n      <label>{label}: {!validity.isValid && validity.message}</label>\n      <input disabled={defaultValue} name={name} type={type} value={defaultValue ? defaultValue : value} onChange={handleChange} />\n    </div>\n  );\n}\n\nexport function TextareaRulesInput({name, defaultValue, label, required, onChange}){\n  const maxCharacters = 100;\n  const [text, setText] = useState('# ');\n  const [rules, setRules] = useState([]);\n  const [characterCount, setCharacterCount] = useState(maxCharacters);\n  const textareaRef = useRef(null);\n  const [validity, setValidity] = useState(required ? {isValid:false,message:''} : {isValid:true, message: ''});\n  \n  useEffect(()=>{\n    onChange(name, rules, validity)\n  },[rules, validity])\n\n  const handleTextareaChange = (e) => {\n    const inputValue = e.target.value;\n    const remainingCharacters = maxCharacters - inputValue.length;\n    \n    if (inputValue.trim() === '') {\n      setText('# ');\n    } else {\n      setText(inputValue);\n    }\n\n    const lines = inputValue.split('\\n');\n    const filteredRules = lines\n      .filter((line) => line.trim() !== '' && line.trim().startsWith('#'))\n      .map((rule) => rule.trim().substring(1));\n    setRules(filteredRules);\n    setCharacterCount(remainingCharacters);\n    textareaRef.current.style.height = 'auto';\n    textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n  };\n\n  const handleEnterPress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      setText(text + '\\n# ');\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  };\n\n  return (\n    <div>\n    <label>House rules:{characterCount}/{maxCharacters} chr</label>\n      <textarea ref={textareaRef} value={text} name={name} onChange={handleTextareaChange} onKeyDown={handleEnterPress} placeholder=\"# Start typing your rules here...\" style={{ overflowY: 'hidden' }} maxLength={maxCharacters} />\n     {/* <div>\n        <p>Derived Rules:</p>\n        <ul>\n          {rules.map((rule, index) => (\n            <li key={index}>{rule}</li>\n          ))}\n        </ul>\n      </div>*/}\n    </div>\n  );\n}\n\nexport function FileUpload({name, label, required, onChange, valid }) {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [error, setError] = useState(null);\n  const [validity, setValidity] = useState(required ? {isValid:false,message:''} : {isValid:true, message: ''});\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n\n    if (!file) {\n      setSelectedFile(null);\n      setError('No file selected.');\n      return;\n    }\n\n    const maxSizeInBytes = 1024 * 1024; // 1 MB\n    if (file.size > maxSizeInBytes) {\n      setSelectedFile(null);\n      setError('File size exceeds the limit (1 MB).');\n      return;\n    }\n\n    setSelectedFile(file);\n    setError(null);\n\n    onChange(name, selectedFile, validity)\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\".pdf,.doc,.docx\" onChange={handleFileChange} />\n      {error && <p className=\"error\">{error}</p>}\n    </div>\n  );\n}\n\nexport function OptionalInputs ({ name, label, required, options, onChange }){\n  const initialInputData = {\n    [name]: false,\n  };\n\n  options.forEach((option) => {\n    initialInputData[option] = '';\n  });\n\n  const [InputData, setInputData] = useState(initialInputData);\n  const [validity, setValidity] = useState(required ? {isValid:false,message:''} : {isValid:true, message: ''});\n  const handleInputChange = useCallback((e) => {\n    const { name, value, type, checked } = e.target;\n\n    setInputData((prevData) => ({\n      ...prevData,\n      [name]: type === 'checkbox' ? checked : value,\n    }));\n  }, []);\n\n  useEffect(() => {\n    onChange(name, InputData, validity)\n  }, [InputData, onChange]);\n\n  return (\n    <div>\n      <label>\n        <input type=\"checkbox\" name={name} onChange={handleInputChange} checked={InputData[name]} />\n        {label}\n      </label>\n\n      {options.map((option) => (\n        <div key={option}>\n          <label>\n            {option}:\n            <input type=\"text\" name={option} value={InputData[option]} onChange={handleInputChange} disabled={!InputData[name]} />\n          </label>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport function Review ({ name, type, label, required, onChange }){\n  const maxCharacters = 200;\n  const [review, setReview] = useState('');\n  const [rating, setRating] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const isTextareaFull = review.length >= maxCharacters;\n  const [validity, setValidity] = useState(required ? {isValid:false,message:''} : {isValid:true, message: ''});\n\n  const handleReviewChange = useCallback((e) => {\n    const text = e.target.value;\n    setReview(text);\n  }, []);\n\n  const handleRatingChange = useCallback((e) => {\n    setRating(e.target.value);\n  }, []);\n\n  const handleEmailChange = useCallback((e) => {\n    setUserEmail(e.target.value);\n  }, []);\n\n  useEffect(() => {\n    const reviewData = {\n      review,\n      rating,\n      userEmail,\n    };\n    onChange(name, reviewData, validity)\n  }, [validity, review, rating, userEmail]);\n\n  return (\n    <div>\n      <textarea\n        value={review}\n        onChange={handleReviewChange}\n        placeholder=\"Write your review...\"\n        maxLength={maxCharacters}\n        className={isTextareaFull ? 'textarea-full' : ''}\n      />\n      <p>Character Count: {review.length}/{maxCharacters}</p>\n\n      <label>\n        Rating:\n        <input\n          type=\"text\"\n          value={rating}\n          onChange={handleRatingChange}\n          placeholder=\"e.g., 8.5/10\"\n        />\n      </label>\n\n      <label>\n        Email:\n        <input\n          type=\"email\"\n          value={userEmail}\n          onChange={handleEmailChange}\n          placeholder=\"Enter your email\"\n        />\n      </label>\n    </div>\n  );\n};\n\nexport const validate = (name,type,required,value) => {\n  if (required) {\n    if (value.trim() === '') {\n      return {\n        isValid: false, message: `${name} is required.`,\n      };\n    }\n  }\n  return {\n    isValid: true,\n    message: '',\n  };\n}\n\nexport function RentalForm() {\n  const [formData, setFormData] = useState({});\n  const [error, setError] = useState({});\n\n  const handleChange = (inputName, value, validity) => {\n  const updatedError = { ...error };\n  if (validity && validity.isValid) {\n    delete updatedError[inputName];\n  } else {\n    updatedError[inputName] = validity ? validity.message : null;\n  }\n  setFormData({ ...formData, [inputName]: value });\n  setError(updatedError);\n};\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Check if there are any errors in the error object\n    const hasErrors = Object.values(error).some((errorMsg) => errorMsg !== null);\n    \n    if (!hasErrors) {\n      console.log(formData); // Submit the form\n    } else {\n      console.log('Form has errors. Cannot submit.'); // Handle the case where there are errors\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <FormInput name='rentalName' label='Arp/Flat Name' type='text' defaultValue='' onChange={handleChange} />\n        <FormInput name='rentalPricing' label='Rental pricing' type='number' defaultValue='1209' onChange={handleChange}/>\n        {/*<FormInput name='rentalCategory' label='Rental Cartegory' type='text' onChange={handleChange} />\n        <FormInput name='Agency' label='Agent involved' type='checkbox' onChange={handleChange} />\n        <OptionalInputs name='RentDue' options={['date', 'amount']} onChange={handleChange}/>\n        <AutoInput name='rentalType' options={['bedsitter','one bedroom']} onChange={handleChange}/>\n        <FileUpload name='agreementContract' onChange={handleChange}/>\n        <Review onChange={handleChange}/>\n        <ContactPlatform name='contactDetails' options={['whatsapp','Instagram']} onChange={handleChange}/>\n        <TextareaRulesInput name='rules' onChange={handleChange}/>*/}\n        <button type=\"submit\">Submit</button>\n      </form>\n      <FormDisplay formData={formData} error={error}/>\n    </>\n  );\n}\n\nexport function FormDisplay({ formData, error }) {\n  return (\n    <div>\n      <h2>Form Data:</h2>\n      <pre>{JSON.stringify(formData, null, 2)}</pre>\n\n      <h2>Errors:</h2>\n      <pre>{JSON.stringify(error, null, 2)}</pre>\n    </div>\n  );\n}\n\n\nexport default RentalForm;\n\n",{"ruleId":"121","severity":1,"message":"122","line":77,"column":45,"nodeType":"123","endLine":77,"endColumn":52},{"ruleId":"121","severity":1,"message":"124","line":80,"column":6,"nodeType":"125","endLine":80,"endColumn":22,"suggestions":"126"},{"ruleId":"127","severity":1,"message":"128","line":2,"column":10,"nodeType":"123","messageId":"129","endLine":2,"endColumn":14},{"ruleId":"127","severity":1,"message":"130","line":15,"column":13,"nodeType":"123","messageId":"129","endLine":15,"endColumn":20},{"ruleId":"127","severity":1,"message":"131","line":16,"column":13,"nodeType":"123","messageId":"129","endLine":16,"endColumn":24},{"ruleId":"127","severity":1,"message":"132","line":8,"column":10,"nodeType":"123","messageId":"129","endLine":8,"endColumn":15},{"ruleId":"133","severity":1,"message":"134","line":34,"column":31,"nodeType":"135","endLine":34,"endColumn":72},{"ruleId":"133","severity":1,"message":"134","line":37,"column":32,"nodeType":"135","endLine":37,"endColumn":74},{"ruleId":"133","severity":1,"message":"134","line":40,"column":27,"nodeType":"135","endLine":40,"endColumn":69},{"ruleId":"133","severity":1,"message":"134","line":46,"column":32,"nodeType":"135","endLine":46,"endColumn":73},{"ruleId":"127","severity":1,"message":"136","line":79,"column":21,"nodeType":"123","messageId":"129","endLine":79,"endColumn":31},{"ruleId":"127","severity":1,"message":"137","line":1,"column":9,"nodeType":"123","messageId":"129","endLine":1,"endColumn":15},{"ruleId":"127","severity":1,"message":"138","line":6,"column":19,"nodeType":"123","messageId":"129","endLine":6,"endColumn":29},{"ruleId":"127","severity":1,"message":"137","line":1,"column":10,"nodeType":"123","messageId":"129","endLine":1,"endColumn":16},{"ruleId":"139","severity":1,"message":"140","line":61,"column":17,"nodeType":"135","endLine":61,"endColumn":68},{"ruleId":"127","severity":1,"message":"141","line":4,"column":10,"nodeType":"123","messageId":"129","endLine":4,"endColumn":15},{"ruleId":"142","severity":1,"message":"143","line":197,"column":3,"nodeType":"144","messageId":"145","endLine":198,"endColumn":192},{"ruleId":"146","severity":1,"message":"147","line":198,"column":84,"nodeType":"148","messageId":"149","endLine":198,"endColumn":136,"fix":"150"},{"ruleId":"146","severity":1,"message":"151","line":198,"column":84,"nodeType":"148","messageId":"149","endLine":198,"endColumn":109,"fix":"152"},{"ruleId":"146","severity":1,"message":"153","line":198,"column":84,"nodeType":"148","messageId":"149","endLine":198,"endColumn":98,"fix":"154"},{"ruleId":"127","severity":1,"message":"155","line":240,"column":11,"nodeType":"123","messageId":"129","endLine":240,"endColumn":22},{"ruleId":"139","severity":1,"message":"140","line":320,"column":21,"nodeType":"135","endLine":320,"endColumn":94},{"ruleId":"127","severity":1,"message":"156","line":1,"column":27,"nodeType":"123","messageId":"129","endLine":1,"endColumn":36},{"ruleId":"121","severity":1,"message":"157","line":10,"column":6,"nodeType":"125","endLine":10,"endColumn":27,"suggestions":"158"},{"ruleId":"121","severity":1,"message":"159","line":14,"column":6,"nodeType":"125","endLine":14,"endColumn":8,"suggestions":"160"},{"ruleId":"127","severity":1,"message":"161","line":86,"column":20,"nodeType":"123","messageId":"129","endLine":86,"endColumn":31},{"ruleId":"121","severity":1,"message":"157","line":91,"column":5,"nodeType":"125","endLine":91,"endColumn":26,"suggestions":"162"},{"ruleId":"121","severity":1,"message":"159","line":95,"column":5,"nodeType":"125","endLine":95,"endColumn":7,"suggestions":"163"},{"ruleId":"127","severity":1,"message":"161","line":171,"column":20,"nodeType":"123","messageId":"129","endLine":171,"endColumn":31},{"ruleId":"121","severity":1,"message":"157","line":175,"column":5,"nodeType":"125","endLine":175,"endColumn":22,"suggestions":"164"},{"ruleId":"127","severity":1,"message":"161","line":225,"column":20,"nodeType":"123","messageId":"129","endLine":225,"endColumn":31},{"ruleId":"127","severity":1,"message":"161","line":267,"column":20,"nodeType":"123","messageId":"129","endLine":267,"endColumn":31},{"ruleId":"121","severity":1,"message":"165","line":279,"column":6,"nodeType":"125","endLine":279,"endColumn":27,"suggestions":"166"},{"ruleId":"127","severity":1,"message":"161","line":306,"column":20,"nodeType":"123","messageId":"129","endLine":306,"endColumn":31},{"ruleId":"121","severity":1,"message":"157","line":328,"column":6,"nodeType":"125","endLine":328,"endColumn":43,"suggestions":"167"},"react-hooks/exhaustive-deps","The ref value 'feedContainerRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'feedContainerRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'loadMoreFeeds'. Either include it or remove the dependency array.","ArrayExpression",["168"],"no-unused-vars","'Menu' is defined but never used.","unusedVar","'showMap' is assigned a value but never used.","'toggleModal' is assigned a value but never used.","'Icons' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'toggleMenu' is assigned a value but never used.","'useRef' is defined but never used.","'setLoading' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Modal' is defined but never used.","no-dupe-class-members","Duplicate name 'handleRulesTextChange'.","PropertyDefinition","unexpected","no-whitespace-before-property","Unexpected whitespace before property join.","MemberExpression","unexpectedWhitespace",{"range":"169","text":"170"},"Unexpected whitespace before property map.",{"range":"171","text":"170"},"Unexpected whitespace before property split.",{"range":"172","text":"170"},"'parsedRules' is assigned a value but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'name' and 'onChange'. Either include them or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["173"],"React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array. If 'setSuggestions' needs the current value of 'options', you can also switch to useReducer instead of useState and read 'options' in the reducer.",["174"],"'setValidity' is assigned a value but never used.",["175"],["176"],["177"],"React Hook useEffect has missing dependencies: 'name' and 'validity'. Either include them or remove the dependency array.",["178"],["179"],{"desc":"180","fix":"181"},[5446,5448],".",[5420,5422],[5407,5409],{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"182","fix":"186"},{"desc":"184","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},"Update the dependencies array to be: [feedItemsCount, loadMoreFeeds]",{"range":"194","text":"195"},"Update the dependencies array to be: [name, onChange, selectedSuggestions]",{"range":"196","text":"197"},"Update the dependencies array to be: [options]",{"range":"198","text":"199"},{"range":"200","text":"197"},{"range":"201","text":"199"},"Update the dependencies array to be: [name, onChange, rules, validity]",{"range":"202","text":"203"},"Update the dependencies array to be: [InputData, name, onChange, validity]",{"range":"204","text":"205"},"Update the dependencies array to be: [validity, review, rating, userEmail, onChange, name]",{"range":"206","text":"207"},[2279,2295],"[feedItemsCount, loadMoreFeeds]",[381,402],"[name, onChange, selectedSuggestions]",[460,462],"[options]",[2824,2845],[2900,2902],[5552,5569],"[name, onChange, rules, validity]",[8615,8636],"[InputData, name, onChange, validity]",[9952,9989],"[validity, review, rating, userEmail, onChange, name]"]