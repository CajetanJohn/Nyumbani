[{"/data/data/com.termux/files/home/Nyumbani/Client/src/index.js":"1","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Modal/Modal.js":"2","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Header/Header.js":"3","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Map/Map.js":"4","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/Feed.js":"5","/data/data/com.termux/files/home/Nyumbani/Client/src/Assets/Icons/Icons.js":"6","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Header/Menu/Menu.js":"7","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedMap/FeedMap.js":"8","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedInfo/FeedInfo.js":"9","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedPhotos/FeedPhotos.js":"10","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedReviews/FeedReviews.js":"11","/data/data/com.termux/files/home/Nyumbani/Client/src/Modules/Upload/Form_upload.js":"12","/data/data/com.termux/files/home/Nyumbani/Client/src/Modules/Upload/ImageUpload.js":"13"},{"size":3956,"mtime":1692703554241,"results":"14","hashOfConfig":"15"},{"size":953,"mtime":1692627617936,"results":"16","hashOfConfig":"15"},{"size":2678,"mtime":1692627617936,"results":"17","hashOfConfig":"15"},{"size":521,"mtime":1692627617936,"results":"18","hashOfConfig":"15"},{"size":4482,"mtime":1692693710015,"results":"19","hashOfConfig":"15"},{"size":594,"mtime":1692627617928,"results":"20","hashOfConfig":"15"},{"size":4008,"mtime":1693668478255,"results":"21","hashOfConfig":"15"},{"size":252,"mtime":1692627617944,"results":"22","hashOfConfig":"15"},{"size":2176,"mtime":1692690698949,"results":"23","hashOfConfig":"15"},{"size":2939,"mtime":1692632251244,"results":"24","hashOfConfig":"15"},{"size":2101,"mtime":1692693586723,"results":"25","hashOfConfig":"15"},{"size":15567,"mtime":1693538096047,"results":"26","hashOfConfig":"15"},{"size":4860,"mtime":1693897526512,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},"17tgy2",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"32"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"32"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/data/data/com.termux/files/home/Nyumbani/Client/src/index.js",["78","79"],[],"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Feed } from './Components/Feed/Feed';\nimport { Header } from './Components/Header/Header';\nimport { Modal } from './Components/Modal/Modal';\nimport { Map } from './Components/Map/Map';\nimport './style.css';\nimport {Menu} from './Components/Header/Menu/Menu';\nimport {Icons} from './Assets/Icons/Icons';\n\nconst getScreenSize = () => {\n  const width = window.innerWidth;\n  if (width <= 768) return 'mobile';\n  if (width <= 1024) return 'laptop';\n  return 'larger';\n};\n\nconst App = () => {\n  const [modal, setModal] = useState(false);\n  const [menu, setMenu] = useState(false);\n  const [mapped, setMap] = useState(false);\n  const [screenSize, setScreenSize] = useState(getScreenSize());\n  const [modalData, setModalData] = useState(null);\n  const feedContainerRef = useRef(null);\n  const [feedItemsCount, setFeedItemsCount] = useState(50);\n  const maxFeeds = 150;\n  const stepSize = 50;\n\n  const toggleModal = useCallback(() => {\n    setModal((prevModal) => !prevModal);\n  }, []);\n\n  const toggleModalWithData = useCallback((data) => {\n    setModalData(data);\n    toggleModal();\n  }, [toggleModal]);\n\n  const toggleMap = useCallback(() => {\n    setMap((prevMap) => !prevMap);\n  }, []);\n  \n  const toggleMenu = useCallback(() => {\n    setMenu((prevMenu) => !prevMenu); \n  }, []); \n\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: `0px 0px ${10 * feedContainerRef.current?.clientHeight}px 0px`,\n      threshold: 1,\n    };\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          if (entry.target === feedContainerRef.current?.lastElementChild) {\n            loadMoreFeeds();\n          }\n        }\n      });\n    }, options);\n\n    if (feedContainerRef.current) {\n      observer.observe(feedContainerRef.current.lastElementChild);\n    }\n\n    return () => {\n      if (feedContainerRef.current) {\n        observer.unobserve(feedContainerRef.current.lastElementChild);\n      }\n    };\n  }, [feedItemsCount]);\n\n  const handleResize = () => {\n    setScreenSize(getScreenSize());\n  };\n\n  const loadMoreFeeds = () => {\n    if (feedItemsCount <= maxFeeds) {\n      setFeedItemsCount((prevCount) => Math.min(prevCount + stepSize, maxFeeds));\n    }\n  };\n\n  return (\n    <div className='ui'>\n      <div data-container='scroll' className='feeds-container'>\n        \n        <div data-container='map' className={`map-${screenSize}`} data-shown={`${screenSize === 'mobile' && !mapped ? 'hidden' : 'shown'}`} >\n          <Map toggleModal={toggleModal} />\n        </div>\n        \n        <div className={`feed-${screenSize}`} ref={feedContainerRef} data-container='feed' data-shown={`${screenSize !== 'mobile' || !mapped ? 'shown' : 'hidden'}`}>\n        {<Header modal={modal} toggleMenu={toggleMenu} screenSize={screenSize} />}\n          {[...Array(feedItemsCount)].map((_, index) => (\n            <Feed key={index} count={index + 1} toggleModal={toggleModal} toggleModalWithData={toggleModalWithData} />\n          ))}\n        </div>\n      </div>\n\n      {screenSize === 'mobile' && (\n          <button className='map-toggle-button' onClick={toggleMap}>\n            {!mapped ? ( <div> <img src={Icons.map} alt=\"Map Icon\" /> Map</div> ) : (<div><img src={Icons.card_list} alt=\"Card List Icon\" /> List</div>)}\n          </button>\n        )}\n      \n      {menu && <Menu screen={screenSize} toggleMenu={toggleMenu}/>}\n      \n      {modal && <Modal screen={screenSize} toggleModal={toggleModal} modalData={modalData} />}\n      \n    </div>\n  );\n};\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n",[],"/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Modal/Modal.js",[],[],"/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Header/Header.js",["80"],[],"import React, { Component } from 'react';\nimport { Menu } from './Menu/Menu';\nimport './Style.css';\nimport {Icons} from '../../Assets/Icons/Icons';\n\nexport class Header extends Component {\n  constructor(props) {\n    super(props);\n    this.mainHeaderRef = React.createRef();\n    this.state = {\n      showMiniHeader: false,\n    };\n  }\n\n  componentDidMount() {\n    const feedContainer = document.querySelector('[data-container=\"scroll\"]');\n    feedContainer.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    const feedContainer = document.querySelector('[data-container=\"scroll\"]');\n    feedContainer.removeEventListener('scroll', this.handleScroll);\n  }\n\n  handleScroll = () => {\n  const mainHeaderHeight = this.mainHeaderRef.current?.clientHeight || 0;\n  const scrollThreshold = 50;\n  const currentScrollY = document.querySelector('[data-container=\"scroll\"]').scrollTop;\n\n  if (currentScrollY > mainHeaderHeight) {\n    this.setState({ showMiniHeader: true });\n  } else if (currentScrollY < mainHeaderHeight + scrollThreshold) {\n    this.setState({ showMiniHeader: false });\n  }\n};\n\n\n  render() {\n    const { modal, screenSize, toggleMenu } = this.props;\n    const { showMiniHeader } = this.state;\n\n    if (modal && screenSize === 'mobile') {\n      return null;\n    }\n\n    return (\n      <div className=\"header\">\n        <MainHeader ref={this.mainHeaderRef} toggleMenu={toggleMenu} />\n        <MiniHeader showMiniHeader={showMiniHeader} />\n      </div>\n    );\n  }\n}\n\nconst MainHeader = React.forwardRef((props, ref) => {\n  const handleMenuClick = () => {\n    props.toggleMenu();\n  };\n\n\n  return (\n    <div className='main-header' ref={ref}>\n      <div className='logo-header'>\n        <div className='logo'>Nyumbani</div>\n        <div className='menu'>\n          <img onClick={handleMenuClick} className='icon' src={Icons.user} alt=\"Icon 1\" />\n          <img onClick={handleMenuClick} className='icon' src={Icons.menu} alt=\"Icon 1\" />\n        </div>\n      </div>\n      <div className='filter-header'>\n        <div className='filter-search'>Destination</div>\n        <div className='filter-selection'>\n          <div><b>Sort</b></div>\n          <div><b>Filter</b></div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nconst MiniHeader = ({ showMiniHeader }) => {\n  return (\n    <div className={`mini-header ${showMiniHeader ? 'slide-down' : ''}`}>\n      <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\n      <div>\n        <div className='mini-filter-search'>Destination</div>\n        <div className='mini-filter-selection'>\n          <span><b>Sort</b></span>\n          <span><b>Filter</b></span>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Map/Map.js",["81","82"],[],"import React from 'react';\nexport class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showMap: false,\n    };\n  }\n\n  toggleMap = () => {\n    this.setState({ showMap: !this.state.showMap });\n  }\n\n  render() {\n    const { showMap } = this.state;\n    const { toggleModal } = this.props;\n\n    return (\n      <div>\n        {/*showMap && <Feed toggleModal={toggleModal} />*/}\n        mapped\n        <button onClick={this.toggleMap}>Toggle Map</button>\n      </div>\n    );\n  }\n}\n","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/Feed.js",["83"],[],"import React, { Component } from 'react';\nimport './Style.css';\nimport './Loading.css';\nimport { FeedInfo } from './FeedInfo/FeedInfo';\nimport { FeedPhotos } from './FeedPhotos/FeedPhotos';\nimport { FeedReviews } from './FeedReviews/FeedReviews';\nimport { FeedMap } from './FeedMap/FeedMap';\nimport { Icons } from '../../Assets/Icons/Icons';\n\nexport class Feed extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      extendedDetailing: false,\n      shownInfo: false,\n      activeSpan: 0,\n      rentalData: null,\n    };\n    this.spanRefs = Array(4).fill(null).map(() => React.createRef());\n  }\n  \n  API_URL = \"http://localhost:5000\";\n\n  async componentDidMount() {\n    try {\n      const response = await fetch(`${this.API_URL}/api/rental/`);\n      const data = await response.json();\n      const firstRental = data[0]; \n      this.setState({ rentalData: firstRental, loading: false });\n    } catch (error) {\n      console.error('Error fetching rental data:', error);\n      this.setState({ loading: false });\n    }\n  }\n\n  handleSpanClick = (index) => {\n    this.setState({ activeSpan: index });\n  };\n\n  toggleShowInfo = () => {\n    this.setState((prevState) => ({ shownInfo: !prevState.shownInfo }));\n  };\n\n  render() {\n    const { loading, shownInfo, activeSpan, rentalData } = this.state;\n\n    if (loading || !rentalData) {\n      return null\n    }\n\n    const {_id, name, location, thumbnailImage, information, userReviews } = rentalData;\n    const { toggleModal, toggleModalWithData } = this.props;\n\n    return (\n      <div feed={loading && 'loading'} className='feed-container'>\n        <div className='displayed-feed-container'>\n          <div className='displayed-feed-header'>\n            <div className='feed-image-container'>\n              <img srcset=\"\" src={thumbnailImage} alt=\"rental thumbnail\"/>\n            </div>\n            <div className='feed-like-button'>\n              <i className=\"fa fa-heart-o\" aria-hidden=\"true\"></i>\n            </div>\n          </div>\n        \n          <div className='displayed-feed-body'>\n            <div className='feed-info category dashed'>\n              <span>{this.props.count}</span>\n              <span></span>\n            </div>\n            <div className='feed-info name dashed'>\n              <h1>{name}</h1>\n            </div>\n            <div className='feed-info rating dashed'>\n              <span><b>{userReviews.rating}</b> - {userReviews.grading} ({userReviews.usersRated})</span>\n              <span> <i className=\"fa fa-map-marker\" aria-hidden=\"true\"></i> <b>{location.residence}</b></span>\n            </div>\n          </div>\n        \n          <div className='displayed-feed-footer'>\n            <div className='feed-selection'>\n              <b>{information.houseCategory}</b>\n              <div>\n                {information.vacant\n                  ? information.numberOfHousesVacant + ' vacant' : 'No vacancy!'}\n              </div>\n              <div className='feed-select price'><h1>{information.pricing.price}</h1></div>\n              <div className='feed-select view'>\n                <button onClick={this.toggleShowInfo}>\n                  {!shownInfo ? ( <span><b>View Rental</b></span>\n                  ) : (<span><b> Show less </b></span>)}\n                </button>\n              </div>\n            </div>\n          </div>\n        \n          <div className='feed-info-more'>\n            <span>here <b>hello</b></span>\n          </div>\n        </div>\n\n        {shownInfo && (\n          <div className={`feed-information-container ${shownInfo && 'slide-down'}`}>\n            <div className='feed-information-header'>\n              {['Info', 'Photos', 'Map', 'Review'].map((text, index) => (\n                <span key={index} ref={this.spanRefs[index]} className={activeSpan === index ? 'active' : ''} onClick={() => this.handleSpanClick(index)} > {text} </span> ))}\n            </div>\n            <div className='feed-information-body'>\n              {activeSpan === 0 && <FeedInfo  id={_id}/>}\n              {activeSpan === 1 && <FeedPhotos id={_id}/>}\n              {activeSpan === 3 && <FeedReviews id={_id} toggleModal={toggleModal} toggleModalWithData={toggleModalWithData}/>}\n              {activeSpan === 2 && <FeedMap id={_id}/>}\n            </div>\n            <div className='feed-information-footer'>\n              <button onClick={this.toggleShowInfo}>close</button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","/data/data/com.termux/files/home/Nyumbani/Client/src/Assets/Icons/Icons.js",[],[],"/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Header/Menu/Menu.js",["84","85","86","87","88"],[],"import React from 'react';\nimport './Style.css';\nimport {Icons} from '../../../Assets/Icons/Icons';\nimport ImageUpload from '../../../Modules/Upload/ImageUpload';\n\nexport class Menu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeItem: 'Options',\n    };\n  }\n\n  handleItemClick = (item) => {\n    if (this.state.activeItem === item) {\n      if (item === 'Options') {\n        this.props.toggleMenu();\n      } else {\n        this.setState({ activeItem: 'Options' });\n      }\n    } else {\n      this.setState({ activeItem: item });\n    }\n  };\n\n  renderMenuItemContent = () => {\n    const { activeItem } = this.state;\n\n    switch (activeItem) {\n      case 'Options':\n        return (\n          <div className='options'>\n            <div onClick={() => this.handleItemClick('Recently viewed')} className={activeItem === 'Recently viewed' ? 'active' : ''}>\n              Recently viewed <img className='icon' src={Icons.right}/>\n            </div>\n            <div onClick={() => this.handleItemClick('Help and support')} className={activeItem === 'Help and support' ? 'active' : ''}>\n              Help and support <img className='icon' src={Icons.right} />\n            </div>\n            <div onClick={() => this.handleItemClick('Affiliation')} className={activeItem === 'Affiliation' ? 'active' : ''}>\n              Affiliation <img className='icon' src={Icons.right} />\n            </div>\n            <div onClick={() => this.handleItemClick('Settings')} className={activeItem === 'Settings' ? 'mar active' : 'mar'}>\n              <b>Settings</b>\n            </div>\n            <div onClick={() => this.handleItemClick('Account Settings')} className={activeItem === 'Account Settings' ? 'active' : ''}>\n              Account Settings <img className='icon' src={Icons.right}/>\n            </div>\n            <div onClick={() => this.handleItemClick('Language')} className={activeItem === 'Language' ? 'active' : ''}>\n              Language \n            </div>\n            <div onClick={() => this.handleItemClick('Upload_form')} className={activeItem === 'Upload_form' ? 'active' : ''}>\n              Host rental \n            </div>\n            <div onClick={() => this.handleItemClick('Log out')} className={activeItem === 'Log out' ? 'active' : ''}>\n              <b>Log out</b>\n            </div>\n          </div>\n        );\n      case 'Language':\n        return <LanguageComponent />;\n      case 'Account Settings':\n        return <AccountSettingsComponent />;\n      case 'Recently viewed':\n        return <RecentlyReviewedComponent />;\n      case 'Help and support':\n        return <HelpAndSupportComponent />;\n      case 'Log out':\n        return <LogOutComponent />;\n      case 'Affiliation':\n        return <AffiliationComponent />;\n        case 'Upload_form':\n        return <ImageUpload />;\n      default:\n        return null;\n    }\n  };\n\n  render() {\n    const { screen, toggleMenu } = this.props;\n\n    return (\n      <div className={`menu ${screen}`}>\n        <div className='menu-header'>\n          <span onClick={() => this.handleItemClick('Options')} className='menu-close-button dashed'>\n            <img className='icon' src={Icons.close} alt=\"Icon 1\" />\n          </span>\n          <h5 className='menu-header-heading'>Menu</h5>\n        </div>\n        <div className='menu-body'>\n          {this.renderMenuItemContent()}\n        </div>\n      </div>\n    );\n  }\n}\n\n// Example components to render when menu items are clicked\nconst LanguageComponent = () => <div>\n  <h5> Language </h5>\n</div>;\nconst AccountSettingsComponent = () => <div>\n  <h5> Account Settings</h5>\n  <div className='form'>\n    <span>Personal Information</span>\n    \n  </div>\n</div>;\nconst RecentlyReviewedComponent = () => <div>\n  <h5>Recently Reviewed</h5>\n</div>;\nconst HelpAndSupportComponent = () => <div>\n  <h5>Help and Support</h5>\n</div>;\nconst LogOutComponent = () => <div>Log Out Component</div>;\nconst AffiliationComponent = () => <div>\n  <h5>Affiliation </h5>\n</div>;\n","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedMap/FeedMap.js",["89","90"],[],"import {useRef, useState} from 'react';\nimport './Style.css';\nimport './Loading.css';\n\nexport const FeedMap = ()=>{\n  const [loading, setLoading] = useState(true);\n  \n return (\n   <div feed={loading && 'loading'} className='feed-map'>\n   </div>\n    )\n}","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedInfo/FeedInfo.js",[],[],"/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedPhotos/FeedPhotos.js",["91","92"],[],"import { useRef, useState, useEffect } from 'react';\nimport './Style.css';\nimport './Loading.css';\n\nexport const FeedPhotos = ({ id }) => {\n  const [loading, setLoading] = useState(true);\n  const [photos, setPhotos] = useState([]);\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n\n  useEffect(() => {\n    const fetchPhotos = async () => {\n      try {\n        const response = await fetch(`/api/photos/${id}`);\n        const photosData = await response.json();\n        setPhotos(photosData);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching photos:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchPhotos();\n  }, [id]);\n\n  const handleLikeClick = async (photoId) => {\n    try {\n      const response = await fetch(`/api/photos/${photoId}/like`, {\n        method: 'POST',\n      });\n\n      if (response.ok) {\n        setPhotos((prevPhotos) =>\n          prevPhotos.map((photo) =>\n            photo._id === photoId ? { ...photo, likes: photo.likes + 1 } : photo\n          )\n        );\n      }\n    } catch (error) {\n      console.error('Error liking photo:', error);\n    }\n  };\n\n  const handlePrevPhoto = () => {\n    setCurrentPhotoIndex((prevIndex) => (prevIndex === 0 ? photos.length - 1 : prevIndex - 1));\n  };\n\n  const handleNextPhoto = () => {\n    setCurrentPhotoIndex((prevIndex) => (prevIndex === photos.length - 1 ? 0 : prevIndex + 1));\n  };\n\n  return (\n    <div feed={loading && 'loading'} className='feed-information'>\n      <div className='feed-info-details'>\n        {loading ? (\n          <div className='loading-spinner'>Loading...</div>\n        ) : (\n          photos.map((photo, index) => (\n            <div key={index} className={`photo-container ${index === currentPhotoIndex ? 'active' : ''}`}>\n              <a href={photo.imageUrl} target='_blank' rel='noopener noreferrer'>\n                <img src={photo.imageUrl} alt={`Photo ${index}`} />\n              </a>\n              <div className='photo-details'>\n                <span>Likes: {photo.likes}</span>\n                <span>Date Posted: {photo.datePosted}</span>\n                {photo.links && (\n                  <ul>\n                    {photo.links.map((link, linkIndex) => (\n                      <li key={linkIndex}>\n                        <a href={link} target='_blank' rel='noopener noreferrer'>\n                          Link {linkIndex + 1}\n                        </a>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </div>\n              <button onClick={() => handleLikeClick(photo._id)}>Like</button>\n            </div>\n          ))\n        )}\n        <button className='prev-button' onClick={handlePrevPhoto}>\n          Previous\n        </button>\n        <button className='next-button' onClick={handleNextPhoto}>\n          Next\n        </button>\n      </div>\n      <div className='feed-info-map'></div>\n    </div>\n  );\n};\n","/data/data/com.termux/files/home/Nyumbani/Client/src/Components/Feed/FeedReviews/FeedReviews.js",["93"],[],"import React, { useState, useEffect } from 'react';\nimport './Style.css';\nimport './Loading.css';\nimport { Modal } from '../../Modal/Modal';\n\nconst Review = ({ userRating, reviewMessage, date }) => {\n  return (\n    <div>\n      <h3>{userRating}</h3>\n      <p>{reviewMessage}</p>\n      <p>{date}</p>\n    </div>\n  );\n};\n\nexport const FeedReviews = ({ id }) => {\n  const [reviews, setReviews] = useState([]);\n  const [showAllReviews, setShowAllReviews] = useState(false);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  const API_URL = \"http://localhost:5000\"; \n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(`${API_URL}/api/reviews/`);\n        const data = await response.json();\n        setReviews(data[0].userReviews.reviews);\n        setLoading(false); // Set loading to false after fetching data\n      } catch (error) {\n        console.error('Error fetching reviews:', error);\n      }\n    }\n    fetchData();\n  }, [id]);\n\n  const toggleReviews = () => {\n    setShowAllReviews(!showAllReviews);\n  };\n\n  return (\n    <div  className={`reviews-container ${showAllReviews ? 'expanded' : ''}`}>\n      {loading ? (\n        <div feed={loading && 'loading'} className='reviews-container'></div>\n      ) : showAllReviews ? (\n        // Show all reviews when expanded\n        reviews.map((review, index) => (\n          <div key={index}>\n            <Review\n              userRating={review.userRating}\n              reviewMessage={review.reviewMessage}\n              date={review.date}\n            />\n          </div>\n        ))\n      ) : (\n        // Show only the first review initially\n        <div>\n          <Review\n            userRating={reviews[0].userRating}\n            reviewMessage={reviews[0].reviewMessage}\n            date={reviews[0].date}\n          />\n        </div>\n      )}\n      {!loading && (\n      <div className=\"display-more-button\">\n        <span onClick={toggleReviews}>\n          <b>{showAllReviews ? 'Show less reviews' : 'Show more reviews'}</b>\n        </span>\n      </div>\n      )}\n    </div>\n  );\n};\n","/data/data/com.termux/files/home/Nyumbani/Client/src/Modules/Upload/Form_upload.js",["94","95","96","97","98","99"],[],"import React, { Component } from 'react';\nimport './Style.css';\nimport axios from 'axios';\n\nclass CreateForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      step: 1,\n      updatedInformation:{},\n      formData: {\n        name: '',\n        location: {\n          latitude: '',\n          longitude: '',\n          residence: '',\n        },\n      },\n      agency: false,\n      agencyDetails: '',\n      decodedRules: [],\n      houseCategory: '',\n      pricing: {\n        price: '',\n        rentDueDate: '',\n        fineIfRentExceeded: '',\n      },\n      currentImage: { Image: '', links: {} },\n      images: [],\n      amenitiesSuggestions: [\n        'wifi',\n        'pets',\n        'water',\n        'pool',\n        'socials',\n      ],\n      selectedAmenities: [],\n      contactPlatformSuggestions: [\n        'WhatsApp',\n        'Instagram',\n        'Facebook',\n      ],\n      selectedContacts: {},\n      contactPlatformDetail: '',\n      rentFine: false,\n      rulesText: '',\n      houseCategorySuggestions: [\n        'Single Room',\n        'Bedsitter',\n        'Two Rooms',\n        'One Bedroom',\n        // Add more house categories...\n      ],\n    };\n  }\n  \n  handleInputChange = (field, value) => {\n    this.setState(prevState => ({\n      formData: {\n        ...prevState.formData,\n        [field]: value,\n      },\n    }));\n  };\n\n  handleLocationChange = (field, value) => {\n    this.setState(prevState => ({\n      formData: {\n        ...prevState.formData,\n        location: {\n          ...prevState.formData.location,\n          [field]: value,\n        },\n      },\n    }));\n  };\n\n  handleImageChange = event => {\n    const image = event.target.files[0];\n    this.setState(prevState => ({ currentImage: { Image: image, links: {}, }, }));\n    };\n  \n  handleAddLink = () => {\n    const { links } = this.state.currentImage;\n    const linkCount = Object.keys(links).length;\n    if (linkCount < 5) {\n      this.setState(prevState => ({\n        currentImage: { ...prevState.currentImage, links: { ...prevState.currentImage.links, [`link${linkCount + 1}`]: '', }, }, }));\n    } \n  };\n\n  handleLinkChange = (key, value) => {\n    this.setState(prevState => ({\n      currentImage: {\n        ...prevState.currentImage,\n        links: {\n          ...prevState.currentImage.links,\n          [key]: value,\n        },\n      },\n    }));\n  };\n\n  handleRemoveLink = key => {\n    const { [key]: _, ...remainingLinks } = this.state.currentImage.links; this.setState(prevState => ({ currentImage: { ...prevState.currentImage, links: remainingLinks, }, })); }; \n\n  handleUploadImage = () => {\n    const { currentImage } = this.state;\n    if (currentImage.Image) {\n      this.setState(prevState => ({\n        images: [...prevState.images, currentImage],\n        currentImage: { Image: '', links: {} },\n      }));\n    }\n  };\n\n  handleRemoveImage = index => {\n    const updatedImages = this.state.images.filter((_, i) => i !== index);\n    this.setState({\n      images: updatedImages,\n    });\n  };\n\n  handleAmenitiesChange = event => {\n    const amenity = event.target.value;\n    if (amenity && this.state.amenitiesSuggestions.includes(amenity)) {\n      this.setState(prevState => ({\n        selectedAmenities: [...prevState.selectedAmenities, amenity],\n        amenitiesSuggestions: prevState.amenitiesSuggestions.filter(\n          item => item !== amenity\n        ),\n      }));\n      event.target.value = '';\n    }\n  };\n\n  handleRemoveAmenity = amenity => {\n    this.setState(prevState => ({\n      selectedAmenities: prevState.selectedAmenities.filter(\n        item => item !== amenity\n      ),\n      amenitiesSuggestions: [...prevState.amenitiesSuggestions, amenity],\n    }));\n  };\n\n  selectContactPlatform = event => {\n    const platform = event.target.value; this.setState({ contactPlatformDetail: '', }); if (platform && this.state.contactPlatformSuggestions.includes(platform)) { this.setState(prevState => ({ selectedContacts: { ...prevState.selectedContacts, [platform]: '', }, contactPlatformSuggestions: prevState.contactPlatformSuggestions.filter( item => item !== platform ), contactPlatformDetail: '', })); } }; \n    \n  handleRulesTextChange = event => {\n  this.setState({\n    rulesText: event.target.value,\n  });\n};\n\n  handleRemoveContactPlatform = platform => {\n    const updatedContacts = { ...this.state.selectedContacts };\n    delete updatedContacts[platform];\n    this.setState(prevState => ({\n      selectedContacts: updatedContacts,\n      contactPlatformSuggestions: [\n        ...prevState.contactPlatformSuggestions,\n        platform,\n      ],\n    }));\n  };\n\n  handleContactPlatformDetailChange = (platform, value) => {\n    this.setState(prevState => ({ selectedContacts: { ...prevState.selectedContacts, [platform]: value, }, })); };\n    \n  handlePricingChange = (field, value) => {\n    this.setState(prevState => ({\n      pricing: {\n        ...prevState.pricing,\n        [field]: value,\n      },\n    }));\n  };\n\n  handleRentFineChange = () => {\n    this.setState(prevState => ({\n      rentFine: !prevState.rentFine,\n    }));\n  };\n\n  handleAgencyChange = () => {\n    this.setState(prevState => ({\n      agency: !prevState.agency,\n    }));\n  };\n\n  handleAgencyDetailsChange = value => {\n    this.setState({\n      agencyDetails: value,\n    });\n  };\n\n  handleRulesTextChange = event => {\n    const newText = event.target.value.replace(/^# /gm, ''); const formattedText = newText .split('\\n') .map(line => `# ${line}`) .join('\\n'); this.setState({ rulesText: formattedText, }); };\n    \n  handleHouseCategoryChange = value => {\n    this.setState({\n      houseCategory: value,\n    });\n  };\n\n  handleNextStep = data => {\n    const { step } = this.state;\n    const isStepValid = this.validateStep(step);\n    if (isStepValid) {\n      this.setState({\n        formData: { ...this.state.formData, ...data },\n        step: step + 1,\n      });\n    }\n  };\n\n  handlePrevStep = () => {\n    this.setState(prevState => ({\n      step: prevState.step - 1,\n    }));\n  };\n\n  validateStep = step => {\n    const inputs = document.querySelectorAll(`.form-step.step${step} [data-needed='required']`);\n    let isValid = true;\n\n    inputs.forEach(input => {\n      if (!input.value) {\n        isValid = true;\n        input.classList.add('invalid-input');\n      } else {\n        input.classList.remove('invalid-input');\n      }\n    });\n\n    return isValid;\n  };\n\n  handleSubmit = () => {\n    const parsedRules = this.state.decodedRules.map(rule => rule.slice(1));\n    /*if (this.state.agency) {\n      updatedInformation.details.agencyDetails = this.state.agencyDetails;}*/\n    \n    \n    let API_URL = \"\";\n    \n    axios\n      .post(`${API_URL}/api/submit/`, this.updatedInformation)\n      .then(response => {\n        alert('Form submitted successfully!');\n        console.log(response.data);\n      })\n      .catch(error => {\n        alert('An error occurred while submitting the form.');\n        console.error(error);\n      });\n  };\n\n  componentDidMount() {\n    this.setState({\n      rulesText: '# ',\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.rulesText !== this.state.rulesText) {\n      const rules = this.state.rulesText.split('\\n').map(rule => rule.trim());\n      const decodedRules = rules.filter(rule => rule.startsWith('#'));\n      this.setState({\n        decodedRules,\n      });\n    }\n  }\n\n  render() {\n  const { step, formData, currentImage, images, amenitiesSuggestions, selectedAmenities,  contactPlatformSuggestions, selectedContacts, pricing, rentFine, agency, agencyDetails, rulesText, houseCategory, houseCategorySuggestions } = this.state;\n\n  return (\n    <div className=\"create-form-container\">\n      {step === 1 && (\n        <div className=\"form-step step1\">\n          <h3>Rental Information</h3>\n          <input data-needed=\"required\" type=\"text\" placeholder=\"Name\" value={formData.name} onChange={(e) => this.handleInputChange('name', e.target.value)} />\n          <input data-needed=\"required\" type=\"text\" placeholder=\"Latitude\" value={formData.location.latitude} onChange={(e) => this.handleLocationChange('latitude', e.target.value)} />\n          <input data-needed=\"required\" type=\"text\" placeholder=\"Longitude\" value={formData.location.longitude} onChange={(e) => this.handleLocationChange('longitude', e.target.value)} />\n          <input data-needed=\"required\" type=\"text\" placeholder=\"Residence\" value={formData.location.residence} onChange={(e) => this.handleLocationChange('residence', e.target.value)} />\n          <div className=\"form-control\">\n            <button className=\"next-button\" onClick={() => this.handleNextStep(1)}>Next</button>\n          </div>\n        </div>\n      )}\n      {step === 2 && (\n        <div className=\"form-step step2\">\n          <h2>Upload images of the rental</h2>\n          <div className=\"image-upload\">\n            <input data-needed=\"required\" hidden id='image-upload' type=\"file\" accept=\"image/*\" onChange={this.handleImageChange} />\n            <label className='input-label' htmlFor='image-upload'>Click to upload an image</label>\n            <button className='upload-button' onClick={this.handleUploadImage}>Upload Image</button>\n          </div>\n          {currentImage.Image && (\n            <div className=\"image-data\">\n              <img src={URL.createObjectURL(currentImage.Image)} alt=\"Uploaded\" />\n              <div className=\"link-inputs\">\n                {Object.entries(currentImage.links).map(([key, value], index) => (\n                  <div key={key}>\n                    <input data-needed=\"required\" type=\"text\" placeholder={`Link ${index + 1}`} value={value} onChange={(e) => this.handleLinkChange(key, e.target.value)} />\n                    <button onClick={() => this.handleRemoveLink(key)}>Remove</button>\n                  </div>\n                ))}\n                <button className='image-link' onClick={this.handleAddLink}>Add Link</button>\n              </div>\n            </div>\n          )}\n          <div className=\"uploaded-images\">\n            {images.length > 0 && (\n              <>\n                <h3>Uploaded Images: {images.length}</h3>\n                {images.map((image, index) => (\n                  <div key={index} className=\"uploaded-image\">\n                    <img src={URL.createObjectURL(image.Image)} alt={`Image ${index + 1}`} />\n                    {Object.entries(image.links).map(([key, value], linkIndex) => (\n                      <p key={key}>Link {linkIndex + 1}: {value}</p>\n                    ))}\n                    <p>Date: {image.Date}</p>\n                    <p>srcUser: {image.srcUser}</p>\n                    <button onClick={() => this.handleRemoveImage(index)}>Remove</button>\n                  </div>\n                ))}\n              </>\n            )}\n          </div>\n          <div className=\"form-control\">\n            <button className=\"prev-button\" onClick={this.handlePrevStep}>Back</button>\n            <button className=\"next-button\" onClick={() => this.handleNextStep(2)}>Next</button>\n          </div>\n        </div>\n      )}\n      \n      {step === 3 && (\n        <div className=\"form-step step3\">\n          <h2>Step 3: Information</h2>\n          <div className=\"amenities\">\n            <h3>Amenities</h3>\n            <input type=\"text\" onChange={this.handleAmenitiesChange} placeholder=\"Add Amenities\" list=\"amenities-suggestions\" data-needed=\"required\" />\n            <datalist id=\"amenities-suggestions\">\n            {amenitiesSuggestions.map((amenity, index) => (\n            <option key={index} value={amenity} />))}\n            </datalist>\n            <div className=\"amenities-list\">\n              {selectedAmenities.map((amenity, index) => (<span key={index}> {amenity} \n              <button onClick={() => this.handleRemoveAmenity(amenity)}> Remove </button>\n              </span> ))}\n            </div>\n          </div>\n          \n          <div className=\"contact\">\n            <h3>Contact</h3>\n            <input type=\"text\" onChange={this.selectContactPlatform} list=\"contact-suggestions\" placeholder=\"Select Contact Platform\" data-needed=\"required\" />\n            <datalist id=\"contact-suggestions\">\n              {contactPlatformSuggestions.map((platform, index) => ( <option key={index} value={platform} /> ))}\n            </datalist>\n            <div className=\"selected-contacts\">\n            {Object.keys(selectedContacts).map((platform, index) => (\n              <div key={index} className=\"contact-platform\">\n              {platform}\n                <button onClick={() => this.handleRemoveContactPlatform(platform)}> Remove </button>\n                <input type=\"text\" value={selectedContacts[platform]} onChange={(e) =>\n                this.handleContactPlatformDetailChange(platform, e.target.value)} placeholder={`Enter ${platform} details`} data-needed=\"required\"/>\n              </div> ))}\n            </div>\n          </div>\n          \n          <div className=\"pricing\">\n            <h3>Pricing</h3>\n            <div>\n              <label>Price:</label>\n              <input type=\"number\" value={pricing.price} onChange={(e) =>this.handlePricingChange(\"price\", e.target.value) } data-needed=\"required\" />\n            </div>\n            \n            <div>\n              <label>Rent Due Date:</label>\n              <input type=\"text\" value={pricing.rentDueDate} onChange={(e) => this.handlePricingChange(\"rentDueDate\", e.target.value) } data-needed=\"required\" />\n            </div>\n            \n            <div>\n              <label>\n                <input type=\"checkbox\" checked={rentFine} onChange={this.handleRentFineChange} /> Rent Fine </label>\n            </div>\n            {rentFine && (\n              <div>\n                <label>Fine if Rent Exceeded:</label>\n                <input type=\"number\" value={pricing.fineIfRentExceeded} onChange={(e) => this.handlePricingChange(\"fineIfRentExceeded\", e.target.value)} data-needed=\"required\" />\n              </div>\n            )}\n          </div>\n          \n          \n          <div className=\"agency\">\n            <h3>Agency</h3>\n            <div>\n              <label> <input type=\"checkbox\" checked={agency} onChange={this.handleAgencyChange} /> ABC Rentals\n              </label>\n            </div>\n            {agency && (\n              <div>\n                <input type=\"text\" value={agencyDetails} onChange={(e) => this.handleInputChange(\"agencyDetails\", e.target.value)} placeholder=\"Agency Details\" data-needed=\"required\"/>\n              </div>\n            )}\n        </div>\n        \n        <div className=\"rules\">\n          <h3>Rules</h3>\n          <div>\n            <label>Rules:</label>\n            <textarea rows=\"4\" value={rulesText} onChange={this.handleRulesTextChange} data-needed=\"required\"></textarea>\n          </div>\n        </div>\n        \n        <div className=\"house-category\">\n          <h3>House Category</h3>\n          <div>\n            <label>House Category:</label>\n            <input type=\"text\" value={houseCategory}\n            onChange={(e) =>this.handleInputChange(\"houseCategory\", e.target.value)}list=\"house-suggestions\"data-needed=\"required\" />\n            <datalist id=\"house-suggestions\"> {houseCategorySuggestions.map((suggestion, index) => ( <option key={index} value={suggestion} />))}\n            </datalist>\n          </div>\n        </div>\n        \n        <div className=\"form-control\">\n          <button className=\"prev-button\" onClick={this.handlePrevStep}>Back</button>\n          <button className=\"next-button\" onClick={this.handleSubmit}>Submit</button>\n        </div>\n        \n      </div>)}\n\n    </div>\n  );\n}\n\n}\n\nexport default CreateForm;\n",[],"/data/data/com.termux/files/home/Nyumbani/Client/src/Modules/Upload/ImageUpload.js",["100"],[],{"ruleId":"101","severity":1,"message":"102","line":77,"column":45,"nodeType":"103","endLine":77,"endColumn":52},{"ruleId":"101","severity":1,"message":"104","line":80,"column":6,"nodeType":"105","endLine":80,"endColumn":22,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":2,"column":10,"nodeType":"103","messageId":"109","endLine":2,"endColumn":14},{"ruleId":"107","severity":1,"message":"110","line":15,"column":13,"nodeType":"103","messageId":"109","endLine":15,"endColumn":20},{"ruleId":"107","severity":1,"message":"111","line":16,"column":13,"nodeType":"103","messageId":"109","endLine":16,"endColumn":24},{"ruleId":"107","severity":1,"message":"112","line":8,"column":10,"nodeType":"103","messageId":"109","endLine":8,"endColumn":15},{"ruleId":"113","severity":1,"message":"114","line":34,"column":31,"nodeType":"115","endLine":34,"endColumn":72},{"ruleId":"113","severity":1,"message":"114","line":37,"column":32,"nodeType":"115","endLine":37,"endColumn":74},{"ruleId":"113","severity":1,"message":"114","line":40,"column":27,"nodeType":"115","endLine":40,"endColumn":69},{"ruleId":"113","severity":1,"message":"114","line":46,"column":32,"nodeType":"115","endLine":46,"endColumn":73},{"ruleId":"107","severity":1,"message":"116","line":79,"column":21,"nodeType":"103","messageId":"109","endLine":79,"endColumn":31},{"ruleId":"107","severity":1,"message":"117","line":1,"column":9,"nodeType":"103","messageId":"109","endLine":1,"endColumn":15},{"ruleId":"107","severity":1,"message":"118","line":6,"column":19,"nodeType":"103","messageId":"109","endLine":6,"endColumn":29},{"ruleId":"107","severity":1,"message":"117","line":1,"column":10,"nodeType":"103","messageId":"109","endLine":1,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":61,"column":17,"nodeType":"115","endLine":61,"endColumn":68},{"ruleId":"107","severity":1,"message":"121","line":4,"column":10,"nodeType":"103","messageId":"109","endLine":4,"endColumn":15},{"ruleId":"122","severity":1,"message":"123","line":197,"column":3,"nodeType":"124","messageId":"125","endLine":198,"endColumn":192},{"ruleId":"126","severity":1,"message":"127","line":198,"column":84,"nodeType":"128","messageId":"129","endLine":198,"endColumn":136,"fix":"130"},{"ruleId":"126","severity":1,"message":"131","line":198,"column":84,"nodeType":"128","messageId":"129","endLine":198,"endColumn":109,"fix":"132"},{"ruleId":"126","severity":1,"message":"133","line":198,"column":84,"nodeType":"128","messageId":"129","endLine":198,"endColumn":98,"fix":"134"},{"ruleId":"107","severity":1,"message":"135","line":240,"column":11,"nodeType":"103","messageId":"109","endLine":240,"endColumn":22},{"ruleId":"119","severity":1,"message":"120","line":320,"column":21,"nodeType":"115","endLine":320,"endColumn":94},{"ruleId":"107","severity":1,"message":"136","line":1,"column":27,"nodeType":"103","messageId":"109","endLine":1,"endColumn":36},"react-hooks/exhaustive-deps","The ref value 'feedContainerRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'feedContainerRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'loadMoreFeeds'. Either include it or remove the dependency array.","ArrayExpression",["137"],"no-unused-vars","'Menu' is defined but never used.","unusedVar","'showMap' is assigned a value but never used.","'toggleModal' is assigned a value but never used.","'Icons' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'toggleMenu' is assigned a value but never used.","'useRef' is defined but never used.","'setLoading' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Modal' is defined but never used.","no-dupe-class-members","Duplicate name 'handleRulesTextChange'.","PropertyDefinition","unexpected","no-whitespace-before-property","Unexpected whitespace before property join.","MemberExpression","unexpectedWhitespace",{"range":"138","text":"139"},"Unexpected whitespace before property map.",{"range":"140","text":"139"},"Unexpected whitespace before property split.",{"range":"141","text":"139"},"'parsedRules' is assigned a value but never used.","'useEffect' is defined but never used.",{"desc":"142","fix":"143"},[5446,5448],".",[5420,5422],[5407,5409],"Update the dependencies array to be: [feedItemsCount, loadMoreFeeds]",{"range":"144","text":"145"},[2279,2295],"[feedItemsCount, loadMoreFeeds]"]